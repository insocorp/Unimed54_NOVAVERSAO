/*

Project      : gr5
Program      : plataforma.html
Function     : plataforma_html
Created on   : 24/10/2008 16:41:33
Descripition : Importação de Seguros - Tokio Marine sistema Plataforma

*/

   local lcTABLE   := '' ,;
         lcFILEIN  := ''  as string

   local laRESULT := {}  as array

   local lnHAND   := 0  ,;
         ii       := 0   as int

   lcFILEIN := WSet("FILEPLATAFORMA")   // Path+Nome arquivo de recebimento de dados.

   lnHAND := fopen(lcFILEIN, 0)
   if lnHAND >= 0
      proc_detalhe(lnHAND)
      fclose(lnHAND)
   else
      qout('Problemas na leitura do arquivo de recebimento: '+lcFILEIN)
   endif

return


/*
* Function..: proc_detalhe(fcHAND)
* Parâmetros: fcHAND - handle do arquivo de leitura
* Retorno...: .t. / .f.
*             1 - Conteudo do campo lido
              2 - Tipo do Dado (N-Num, D-Date, C-Char) base GR5
              3 - Posicao Inicial
              4 - Número de caracteres
              5 - Casas decimais
              6 - Destino/Origem Tabela
              7 - Destino/Origem Campo
              8 - F-Fixo, S Dados, N - Não dados
              9 - Flag para leitura no arquivo de retorno so lê o campo se true
              10- Tipo do campo no layout N - numerico / A - Alfa numerico
*/
static function proc_detalhe(fcHAND)

   #define NEWLINE chr(13) + chr(10)

   local ii       := 0 ,;
         zz       := 0 ,;
         lnHAND1  := 0 ,;
         lnAI     := 0 ,;
         lnPA     := 0 ,;
         lnPASTA  := 0 ,;
         lnPOS    := 0  as int

   local lcLINE        := '' ,;
         lcLOG         := '' ,;
         lcWHERE       := ''  as string

   local laRESULT  := {} ,;
         laFIELDS  := {} ,;
         laDETVAL  := {} ,;
         laSAVEPASTA  := {},;
         laSAVESEGURO := {},;
         laSAVEPARC   := {},;
         laSAVEAUX := {} ,;
         laSAVEAUX1:= {} ,;
         laSAVEAUX2:= {} ,;
         laSAVEAUX3:= {} ,;
         laSAVEAUX4:= {} ,;
         laSAVE    := {} ,;
         laDADOS   := {} ,;
         laPASTA   := {}  as array

   local llERRO    := .f. as logical

   laDETVAL := {{ ""   , "N",    1,  14, 0, ""                          , "seqcontrole"             ,"N" },; //1
                { ""   , "D",   15,  10, 0, ""                          , "dtmovto"                 ,"N" },; //2
                { ""   , "N",   36,   2, 0, ""                          , "tiporeg"                 ,"N" },; //3
                { ""   , "N",   38,   1, 0, ""                          , "codcia"                  ,"N" },; //4
                { ""   , "N",   42,   4, 0, "pasta_seguro"              , "CD_RAMOSRSN"             ,"S" },; //5
                { ""   , "N",   46,   4, 0, ""                          , "anoentrada"              ,"N" },; //6
                { ""   , "C",   55,  12, 0, "pasta_seguro"              , "NR_SINISTRO"             ,"S" },; //7
                { ""   , "D",   67,  10, 0, "pasta"                     , "DT_ENTRADA"              ,"S" },; //8
                { ""   , "C",   87,   2, 0, "receb_ressarcimento"       , "TP_LANCTO"               ,"S" },; //9
                { ""   , "N",   91,  15, 2, "receb_ressarcimento"       , "VL_TT_REC"               ,"S" },; //10
                { ""   , "N",   93,   4, 0, "receb_ressarcimento"       , "NR_PARC_TT_REC"          ,"S" },; //11
                { ""   , "N",   95,   2, 0, "receb_ressarcimento"       , "VENCTO_1_PARC_REC"       ,"S" },; //12
                { ""   , "N",   97,   2, 0, "receb_ressarcimento"       , "TP_PAGTO_REC"            ,"S" },; //13
                { ""   , "N",   99,   2, 0, "mvt_parc_ressarc"          , "CD_BANCO"                ,"S" },; //14
                { ""   , "N",  101,   2, 0, "mvt_parc_ressarc"          , "BANCO_AGENCIA"           ,"S" },; //15
                { ""   , "C",  103,   2, 0, "mvt_parc_ressarc"          , "BANCO_CONTA"             ,"S" },; //16
                { ""   , "N",  105,   2, 0, "mvt_parc_ressarc"          , "BANCO_CHEQUE"            ,"S" },; //17
                { ""   , "C",  107,   2, 0, "receb_ressarcimento"       , "TP_PRODUCAO              ,"S" },; //18
                { ""   , "N",  109,   2, 0, "pasta_seguro"              , "NR_APOLICE"              ,"S" },; //19
                { ""   , "N",  117,   2, 0, "pasta_seguro"              , "NR_CERTIFICADO"          ,"S" },; //20
                { ""   , "C",  119,   8, 0, "pasta_seguro"              , "NR_ENDOSSO"              ,"S" },; //21
                { ""   , "N",  127,   2, 0, ""                          , "TP_ENDOSSO"              ,"S" },; //22
                { ""   , "C",  129,   1, 0, "pfpj"                      , "idESTIPULANTE"           ,"S" },; //23
                { ""   , "N",  131,  15, 0, "pasta_seguro"              , "nrESTIPULANTE"           ,"S" },; //24
                { ""   , "C",  143,   2, 0, "pfpj"                      , "dvESTIPULANTE"           ,"S" },; //25
                { ""   , "C",  147,  45, 0, "pfpj"                      , "nmESTIPULANTE"           ,"S" },; //26
                { ""   , "C",  181,   1, 0, "pfpj"                      , "idSEGURADO"              ,"S" },; //27
                { ""   , "N",  183,  15, 0, "pasta_seguro"              , "nrSEGURADO"              ,"S" },; //28
                { ""   , "C",  195,   2, 0, "pfpj"                      , "dvSEGURADO"              ,"S" },; //29
                { ""   , "C",  199,  45, 0, "pfpj"                      , "nmSEGURADO"              ,"S" },; //30
                { ""   , "C",  233,   1, 0, ""                          , "codlocal"                ,"S" },; //31
                { ""   , "C",  235,  15, 0, ""                          , "codsublocal"             ,"S" },; //32
                { ""   , "C",  237,   2, 0, ""                          , "codloccapt"              ,"S" },; //33
                { ""   , "N",  239,   4, 0, "pasta_seguro"              , "CD_PRODUTO"              ,"S" },; //34
                { ""   , "N",  245,   1, 0, "pasta_seguro"              , "CD_CORRETOR"             ,"S" },; //35
                { ""   , "D",  247,  10, 0, "pasta_seguro"              , "DT_AVISO"                ,"S" },; //36
                { ""   , "D",  267,  10, 0, "pasta_seguro"              , "DT_SINISTRO"             ,"S" },; //37
                { ""   , "C",  287,  45, 0, "pfpj"                      , "idSINISTRADO"            ,"S" },; //38
                { ""   , "N",  289,   1, 0, "pasta_seguro"              , "nrSINISTRADO"            ,"S" },; //39
                { ""   , "C",  301,  15, 0, "pfpj"                      , "dvSINISTRADO"            ,"S" },; //40
                { ""   , "C",  305,   2, 0, "pfpj"                      , "nmSINISTRADO"            ,"S" },; //41
                { ""   , "C",  347,  45, 0, "pfpj"                      , "idBENEFICIARIO"          ,"S" },; //42
                { ""   , "N",  349,   1, 0, "pasta_seguro_beneficiario" , "nrBENEFICIARIO"          ,"S" },; //43
                { ""   , "C",  361,  15, 0, "pfpj"                      , "dvBENEFICIARIO"          ,"S" },; //44
                { ""   , "C",  365,   2, 0, "pfpj"                      , "nmBENEFICIARIO"          ,"S" },; //45
                { ""   , "C",  419,   1, 0, "pfpj"                      , "idRECLAMANTE"            ,"S" },; //46
                { ""   , "C",  421,  15, 0, "pasta_seguro"              , "nrRECLAMANTE"            ,"S" },; //47
                { ""   , "N",  433,   2, 0, ""                          , "dvRECLAMANTE"            ,"S" },; //48
                { ""   , "C",  437,  45, 0, "pfpj"                      , "nmRECLAMANTE"            ,"S" },; //49
                { ""   , "N",  473,  10, 0, "pasta"                     , "NR_PASTA_ARQUIVO"        ,"S" },; //50
                { ""   , "N",  475,   1, 0, "mvt_despesas"              , "TP_PAGTO"                ,"S" },; //51
                { ""   , "N",  477,   1, 0, "mvt_despesas"              , "TP_GASTO"                ,"S" },; //52
                { ""   , "N",  479,  14, 0, ""                          , "numoblig"                ,"S" },; //53
                { ""   , "N",  481,   4, 0, ""                          , "codbcopagador"           ,"S" },; //54
                { ""   , "N",  485,   1, 0, ""                          , "codagenpagador"          ,"S" },; //55
                { ""   , "N",  487,   1, 0, ""                          , "numctapagador"           ,"S" },; //56
                { ""   , "N",  489,   6, 2, "pasta_seguro"              , "PC_RESSEGURO"            ,"S" },; //57
                { ""   , "N",  495,   1, 0, "pasta_seguro"              , "VL_RESSEGURO"            ,"S" },; //58
                { ""   , "N",  497,   1, 0, ""                          , "valcosseguro"            ,"S" },; //59
                { ""   , "N",  499,   1, 0, ""                          , "valsaldorescont"         ,"S" },; //60
                { ""   , "C",  501,   1, 0, ""                          , "stperdatotal"            ,"S" },; //61
                { ""   , "C",  503,   1, 0, ""                          , "stsalvado"               ,"S" },; //62
                { ""   , "C",  505,   1, 0, ""                          , "strecupfurto"            ,"S" },; //63
                { ""   , "C",  507,   1, 0, ""                          , "tipoperdajur"            ,"S" },; //64
                { ""   , "N",  509,   1, 0, "pasta_pedido_lmi"          , "VL_SINISTRO"             ,"S" },; //65
                { ""   , "N",  511,   1, 0, "pasta_valor_pedidos"       , "VL_RISCO"                ,"S" },; //66
                { ""   , "C",  513,   1, 0, "pasta"                     , "EXTRA"                   ,"S" },; //67
                { ""   , "C",  515,   1, 0, "pasta"                     , "RESUMO_ACAO"             ,"S" },; //68
                { ""   , "N",  517,   1, 0, "pasta_pedido_lmi"          , "VL_LMI"                  ,"S" },; //69
                { ""   , "C",  519,   1, 0, ""                          , "nomcidocor"              ,"S" },; //70
                { ""   , "N",  521,   1, 0, ""                          , "valtotestress"           ,"S" },; //71
                { ""   , "N",  523,   1, 0, "pasta_seguro"              , "CD_CCUSTO"               ,"S" },; //72
                { ""   , "N",  529,   1, 0, "pasta_seguro"              , "VL_RESERVA"              ,"S" },; //73
                { ""   , "C",  531,   1, 0, ""                          , "uf_rec"                  ,"S" },; //74
                { ""   , "C",  533,   1, 0, "pasta"                     , "NR_PROCESSO"             ,"S" },; //75
                { ""   , "N",  535,   1, 0, ""                          , "vr_seg"                  ,"S" },; //76
                { ""   , "C",  537,   1, 0, ""                          , "mot_oper"                ,"S" },; //77
                { ""   , "N",  537,   1, 0, "mvt_parc_ressarc"          , "TP_RECBTO"               ,"S" } //78
                }

   db_begin()
   while .t.
      lcLINE := freadtxt (fcHAND)        // Le linha a linha do arquivo referenciado em fcHAND
      if ferror() <> 0
         exit
      endif
      if substr(lcLINE,1,2) = ""
         for ii := 1 to len(laDETVAL)
             if laDETVAL[ii,8] == 'S'                           // flag que indica que o campo vai ser gravado
                // fazer os tratamentos para os campos
                if laDETVAL[ii,2] == 'N'
                   if laDETVAL[ii,5] > 0                                                     // campo definido como numérico e tem casas decimais
                      aadd(laSAVEAUX , val(substr(lcLINE, laDETVAL[ii,3],(laDETVAL[ii,4]-laDETVAL[ii,5]))+;
                                           '.'+;
                                           substr(lcLINE, (laDETVAL[ii,3]+(laDETVAL[ii,4]-laDETVAL[ii,5])),laDETVAL[ii,5])))
                   else
                      aadd(laSAVEAUX , val(substr(lcLINE, laDETVAL[ii,3],laDETVAL[ii,4])))
                   endif
                elseif laDETVAL[ii,2] == 'D' // ENVIO TIMESTAMP SELECIONADAS AS 8 PRIMEIRAS POSICOES
                   if substr(lcLINE, laDETVAL[ii,3],laDETVAL[ii,4]) == '00000000' .or.;
                      empty(substr(lcLINE, laDETVAL[ii,3],laDETVAL[ii,4]))
                      aadd(laSAVEAUX , nil )
                   else
                      aadd(laSAVEAUX , alltrim(substr( lcLINE, laDETVAL[ii,3] , laDETVAL[ii,4])))
                   endif
                else
                   aadd(laSAVEAUX , alltrim(substr( lcLINE, laDETVAL[ii,3] , laDETVAL[ii,4])))
                endif
             endif
         next ii
         if len(laSAVEAUX) > 0
            aadd(laDADOS, laSAVEAUX)
         endif
         laSAVEAUX := {}
      endif
   enddo
   if len(laDADOS) > 0
      lcLOG := space(20)+'Importação de Seguros PLATAFORMA - Tokio Marine - '+dtoc(date())+' - '+time()+NEWLINE
      lcLOG += NEWLINE
      for ii := 1 to len(laDADOS)
          if substr(laDADOS[ii,3]) == '1' // Seleciona o tipo 1 Ressarcimento  
             * '01' Inclusão de dados de sinistro
             * '02' Atualização de dados de sinistro
             * '05' Reativação de sinistro
             * '07' Reabertura de sinistro
             * '54' Provisão de ressarcimento
             * '56' Reabertura de sinistro
             
             *// montando array para pasta

             if substr(laDADOS[ii,9) == '01' // Inclusão de dados de ressarcimento nova pasta
                laSAVEPASTA := {}
                lnPA   := db_insert_id()
                gera_pasta(laDADOS[ii,78])
               
                aadd(laSAVEPASTA, {'NR_PASTA'            ,'TP_PASTA'            ,'LOGIN_CADASTRO'      ,'DT_CADASTRO'         ,;
                                   'TP_PASTA'            ,'NR_PROCESSO'         ,'CIP_EMPRESA'         ,;
                                   'POSICAO_EMPRESA'     ,'DT_CITACAO'          ,'UF'                  ,;
                                   'CIP_PARTE_CONTRARIA' ,'NR_PASTA_ARQUIVO' })
                          
                aadd(laSAVEPASTA, {gera_pasta(laDADOS[ii,75])  ,'Ressarcimento', 'Plataforma'          ,laDADOS[ii,8]   ,;
                                   'interface'                 ,laDADOS[ii,50]        ,'5'             ,;
                                   'Autor'                     ,laDADOS[ii,8]         ,'SP'            ,; 
                                   '5'                         ,laDADOS[ii,50]  }) // posicao da empresa fixa para teste com 5

                if db_insert(laSAVEPASTA,'pasta') == -1
                   db_rollback()
                   error_sys(db_error())
                else
                   qout("Erro na gravação do arquivo da PASTA.")
                   return(.f.)
                endif
                lnPASTA := lnPA              
                if substr(laDADOS[ii,9]) == '54' 
*// gerar parcelas
*           // busca o nr_pasta para o sinistro( laDADOS[ii,1] )
                   if db_select({'NR_PASTA'},'pasta_seguro',,{'NR_SINISTRO='+DLAP+alltrim(laDADOS[ii,1])+DLAP}) == -1
                      error_sys(db_error())
                   endif
                   laPASTA := db_fetchall()
                   if len(laPASTA) > 1
                      if db_insert(laSAVE,'pasta') == -1
                         db_rollback()
                         error_sys(db_error())
                      else
                         lcLOG += 'Registro importado com sucesso. PASTA Pasta Nr. '+alltrim(str(laPASTA[2,1])) + ', Sinistro '+alltrim(laDADOS[ii,1])+NEWLINE
                      endif
           
*             // montando array para pasta_seguro
                            
                      laSAVE := {}
                      aadd(laSAVE, {'NR_PASTA'                   ,'NR_SINISTRO'              ,'NR_APOLICE'          ,;
                                    'NR_CERTIFICADO'             ,'NR_ENDOSSO'               ,'CD_PRODUTO'          ,;
                                    'DT_AVISO'                   ,'PC_RESSEGURO'             ,'VL_RESSEGURO'        ,;
                                    'CD_CCUSTO'                  ,'VL_RESERVA'               ,'CIP_ESTIPULANTE'     ,;
                                    'CIP_SEGURADO'               ,CIP_RECLAMANTE'            ,'NR_CONTROLE'         ,;
                                    'TP_PASTA' })

                      aadd(laSAVE, {lnPASTA                      ,laDADOS[ii,7]                ,laDADOS[ii,19]        ,;
                                    laDADOS[ii,20]               ,laDADOS[ii,21]               ,laDADOS[ii,34]        ,;
                                    laDADOS[ii,34]               ,laDADOS[ii,57]               ,laDADOS[ii,58]        ,;
                                    laDADOS[ii,72]               ,laDADOS[ii,73]               ,cip_pfpj(alltrim(laDADOS[ii,26]), 'EST')                   ,;
                                    cip_pfpj(alltrim(laDADOS[ii,30]), 'SEG'),cip_pfpj(alltrim(laDADOS[ii,49]), 'REC'),  lnAI ,;
                                    'Ressarcimento' })

                      if db_insert(laSAVE,'pasta_seguro') == -1
                         db_rollback()
                         error_sys(db_error())
                      else
                         lcLOG += 'Registro importado com sucesso. PASTA_SEGURO Pasta Nr. '+alltrim(str(laPASTA[2,1])) + ', Sinistro '+alltrim(laDADOS[ii,1])+NEWLINE
                      endif     
                      
*             // montando array para pasta_seguro_lmi
*             
                      if laDADOS[ii,69] > 0 .or. laDADOS[ii,65] > 0
                         lnCONTROLE := lnAI
                                         
                         laSAVE := {}
                         aadd(laSAVE, {'NR_PASTA'            ,'NR_CONTROLE'         ,'NR_LMI'              ,;
                                       'VL_LMI'              ,'VL_SINISTRO'})
                          
                         aadd(laSAVE, {lnPASTA                        ,lnCONTROLE                     ,laLMI           ,;
                                       laDADOS[ii,69]                 ,laDADOS[ii,65]  }) 
                           
                         if db_insert(laSAVE,'pasta_seguro_lmi') == -1
                            db_rollback()
                            error_sys(db_error())
                         else
                            lcLOG += 'Registro importado com sucesso. PASTA_SEGURO_LMI Pasta Nr. '+alltrim(str(laPASTA[2,1])) + ', Sinistro '+alltrim(laDADOS[ii,1])+NEWLINE
                         endif
                      endif
*             // montando array para pasta_seguro_beneficiario
*                                          
                      if len(laDADOS[ii,45]) > 0
                         laSAVE := {}
                         aadd(laSAVE, {'NR_PASTA'            ,'NR_CONTROLE'         ,'CIP_BENEFICIARIO'   })
                          
                         aadd(laSAVE, {lnPASTA               ,lnCONTROLE            ,cip_pfpj(alltrim(laDADOS[ii,45]), 'BEN')   }) 
                           
                         if db_insert(laSAVE,'pasta_seguro_beneficiario') == -1
                            db_rollback()
                            error_sys(db_error())
                         else
                            lcLOG += 'Registro importado com sucesso. BENEFICIARIO Pasta Nr. '+alltrim(str(laPASTA[2,1])) + ', Sinistro '+alltrim(laDADOS[ii,1])+NEWLINE
                         endif
                      endif
*             // montando array para ressarcimento
                      if laDADOS[ii,09] > 0 //valor total recebido 
                                          
                         laSAVE := {}
                         aadd(laSAVE, {'NR_PASTA'                   ,'NR_SINISTRO'              ,'TP_LANCTO'            ,;
                                       'VL_TT_REC'                  ,'NR_PARC_TT_REC'           ,'VENCTO_1_PARC_REC'   ,;
                                       'TP_PAGTO_REC'               ,'TP_PRODUCAO'              ,'VL_RESSEGURO'        ,;
                                       'LOGIN_CADASTRO'             ,'TP_PASTA' })

                         aadd(laSAVE, {lnPASTA                      ,laDADOS[ii,7]             ,laDADOS[ii,19]        ,;
                                       laDADOS[ii,09]               ,laDADOS[ii,10]            ,laDADOS[ii,11]        ,;
                                       laDADOS[ii,12]               ,laDADOS[ii,13]            ,laDADOS[ii,18]        ,;
                                       'Plataforma'                 ,'Ressarcimento'         })
                                                         
                         if db_insert(laSAVE,'receb_ressarcimento') == -1
                            db_rollback()
                            error_sys(db_error())
                         else
                            lcLOG += 'Registro importado com sucesso. RECEB_RESSARCIMENTO Pasta Nr. '+alltrim(str(laPASTA[2,1])) + ', Sinistro '+alltrim(laDADOS[ii,1])+NEWLINE
                         endif     

*             // montando array para parcelas de ressarcimento
                         if laDADOS[ii,10] > 0 // nr de parcelas 
                                             
                            lnvl_parc_rec := (laDADOS[ii,10] / laDADOS[ii,11])
                              
                            iii := 0
                            for iii := 1 to (laDADOS[ii,10])

                                ldtvenc := laDADOS[ii,11] + (iii * 30)
                                  
*                               // buscando o ultimo nr_parcela de ressarcimento para inserir em mvt_parc_ressarc
                                                                                        
                                lncontrec := db_insert_id()
                                if iii == 1
                                   laSAVE := {}
                                   aadd(laSAVE, {'NR_PASTA'            ,'NR_SINISTRO'         ,'NR_CONTROLE_REC'     ,;
                                                 'LOGIN_CADASTRO'      ,'NR_PARC_REC'         ,'DT_VENCTO_REC'       ,;
                                                 'VL_PARC_REC'         ,'BANCO_REC'           ,'AGENCIA_REC'         ,;
                                                 'CONTA_BANCARIA_REC'  ,'CHEQUE_REC' })
   
                                   aadd(laSAVE, {lnPASTA               ,laDADOS[ii,7]     ,lncontrec             ,;
                                                 'Plataforma'          ,iii               ,ldtvenc               ,;
                                                 lnvl_parc_rec         ,laDADOS[ii,14]    ,laDADOS[ii,15]        ,;
                                                 laDADOS[ii,16]        ,laDADOS[ii,17]})
                                else
                                   laSAVE := {}
                                   aadd(laSAVE, {'NR_PASTA'            ,'NR_SINISTRO'         ,'NR_CONTROLE_REC'     ,;
                                                 'LOGIN_CADASTRO'      ,'NR_PARC_REC'         ,'DT_VENCTO_REC'       ,;
                                                 'VL_PARC_REC'      })
   
                                   aadd(laSAVE, {lnPASTA               ,laDADOS[ii,7]     ,lncontrec             ,;
                                                 'Plataforma'          ,iii               ,ldtvenc               ,;
                                                 lnvl_parc_rec  })
                                endif
                                                                                                           
                                if db_insert(laSAVE,'mvt_parc_ressarc') == -1
                                   db_rollback()
                                   error_sys(db_error())
                                else
                                   lcLOG += 'Registro importado com sucesso. MVT_PARC_RESSARC Pasta Nr. '+alltrim(str(laPASTA[2,1])) + ', Sinistro '+alltrim(laDADOS[ii,1])+NEWLINE
                                endif
                             next
                          endif       
	  	                 endif
*             // montando array para salvar as despesas mvt_parc_ressarc - descritivo abaixo do programa para encaixa
          

                   endif
                                      
                endif
                    
             elseif substr(laDADOS[ii,9]) == '02' 
             
                  lcNR_SINISTRO := substr(laDADOS[ii,7])
                  
                  ** localizar o nr_pasta_arquivo para carregar o nr_pasta e NR_SINISTRO 
 ** não esquecer ce verificar o nr da pasta        
                   if db_select({'pasta_seguro.NR_PASTA',;
                                 'pasta_seguro.NR_CONTROLE',;
                                 'pasta_seguro.TP_SINISTRO',;
                                 'pasta_seguro.NR_SINISTRO'},'pasta_seguro',,;
                                {'pasta_seguro.NR_SINISTRO='+lcNR_SINISTRO}) == -1
                      error_sys(db_error())
                   endif
                   laRES1 := db_fetchrow()
                   if len(laRES1) > 0
                      lcNR_SINISTRO := (laRES1[4])
                      lcNR_PASTA    := (laRES1[1])
                      laSAVE := {}
                      aadd(laSAVE, {'NR_PASTA_ARQUIVO'    ,'DT_ENTRADA'          ,;  
                                    'LOGIN_CADASTRO'      ,'NR_PROCESSO'         ,'DT_CADASTRO'         ,;
                                    'CIP_EMPRESA'         ,'POSICAO_EMPRESA'     ,'DT_CITACAO'          ,;
                                    'UF'                  ,'CIP_PARTE_CONTRARIA'})
                           
                      aadd(laSAVE, {laDADOS[ii,50]                 ,laDADOS[ii,8]   ,;
                                    'interface'                    ,laDADOS[ii,50]                 ,laDADOS[ii,8]   ,;
                                    '5'                            ,' '                            ,laDADOS[ii,8]   ,;
                                    ' '                            ,' '  }) // posicao da empresa fixa para teste com 5

                      if db_update(laSAVE,'pasta',{"NR_PASTA_ARQUIVO = " + alltrim( str( laDADOS[ii,2] "AND TP_PASTA = "+DLAP+"Ressarcimento"+DLAP) ) }) == -1
                         db_rollback()
                         error_sys(db_error())
               
*                // processo não localizado - grava na pendencia
                         laSAVE := {}
                         aadd(laSAVE, {'NR_CONTROLE','NR_PASTA_ARQUIVO'             ,'DT_ENTRADA'          ,;  
                                       'LOGIN_CADASTRO'             ,'NR_PROCESSO'         ,'DT_CADASTRO'         ,;
                                       'CIP_EMPRESA'                ,'POSICAO_EMPRESA'     ,'DT_CITACAO'          ,;
                                       'UF'                         ,'CIP_PARTE_CONTRARIA'})
                          if db_select(laSAVE,'pendencia') == -1
                             error_sys(db_error())
                          endif
                         lnAI     := db_insert_id()              
                         lcNR_CONTROLE := lnAI
                         aadd(laSAVE, {lnAI,laDADOS[ii,50]                 ,laDADOS[ii,8]   ,;
                                        'Plataforma'                   ,laDADOS[ii,50]                 ,laDADOS[ii,8]   ,;
                                        '5'                            ,' '                            ,laDADOS[ii,8]   ,;
                                        ' '                            ,' '  }) // posicao da empresa fixa para teste com 5
                         
                         if db_insert(laSAVE,'pendencia') == -1
                            db_rollback()
                            error_sys(db_error())
        	                  wout("Erro na gravação do arquivo de pendencia.")
                            return(.f.)  
                         endif
                      endif   
                   endif
            elseif (laDADOS[II,9]) == '04' // Pagamento de indenização

*//'1' - Pagamento total
*//'2' - Pagamento parcial
*//'3' - Pagamento complementar                

                   if (laDADOS[II,51]) == '1' .or. (laDADOS[II,51]) == '2' .or. (laDADOS[II,51]) == '3' 

*                                   // montando array para salvar as despesas 
 
                      laSAVE := {}
                      aadd(laSAVE, {'NR_PASTA'            ,'NR_SINISTRO'         ,'QUANTIDADE'          ,;
                                    'VL_UNIT'             ,'VL_TOTAL'            ,'LOGIN'               ,;
                                    'LOGIN_RESP'          ,'LOGIN_APROVACAO'     ,'LOGIN_REVISAO'       ,;
                                    'FL_APROVADO'         ,'FL_APROVACAO'        ,'FL_REVISAO'          ,;
                                    'DT_PREVISAO_PAGTO'   ,'DT_EMISSAO_DOCFISCAL','DT_ENVIO_CTPAG'      ,;
                                    'DT_APROVACAO'        ,'DT_REVISAO'          ,'DT_REF'              ,;
                                    'FORMA_PAGAMENTO'     ,'CIP_FAVORECIDO'      ,'CD_DESPESA'          ,;
                                    'CD_GRP_DESPESA' })

                      aadd(laSAVE, {lcNR_PASTA           ,laDADOS[ii,7]         ,1                     ,;
                                    laDADOS[ii,10]        ,laDADOS[ii,10]        ,'Plataforma'          ,;
                                    'Plataforma'          ,'Plataforma'          ,'Plataforma'          ,;
                                    'A'                   ,'A'                   ,'A'                   ,;
                                    laDADOS[ii,2]         ,laDADOS[ii,2]         ,laDADOS[ii,2]         ,;
                                    laDADOS[ii,2]         ,laDADOS[ii,2]         ,laDADOS[ii,2]         ,;
                                    gera_FPagto(laDADOS[ii,51]) ,cip_pfpj(alltrim(laDADOS[ii,24]), 'FAV') , laDADOS[ii,9] ;
                                    gera_GrupoDesp(laDADOS[ii,3]) })
                     if db_insert(laSAVE,'mvt_despesa') == -1
                        db_rollback()
                        error_sys(db_error())
                        qout("Erro Insert -> "+db_error())
                        return(.f.)
                     else
                        lcWHERE := 'NR_PASTA   = '+lcNR_PASTA+' and NR_SINISTRO = '+lcNR_SINISTRO
** trocar para inserir                        
                        if db_update({{"FL_PGINTERFACE","DT_ENVIO_CTPAG"},{"",nil}},'mvt_despesa',{lcWHERE}) == -1
                           qout("Erro Update -> "+db_error())
                           db_rollback()
                           return(.f.)
            	          endif
*                        lcLOG += 'PAGAMENTO EFETUADO                 Nr Pasta '+substr(lcLINE,323,6)+'  Nr Despesa '+substr(lcLINE,317,6)+ NEWLINE

*                // buscando o ultimo nr_despesa AI de mvt_despesa para inserir em mvt_despesa_pagamento
                        lnAI := db_insert_id()
*                // montando array para salvar as despesas mvt_despesa_pagamento
                        laSAVE := {}
                        aadd(laSAVE, {'NR_PASTA'      ,'NR_DESPESA'    ,'DT_PAGAMENTO'  ,;
                              'VL_PAGO'       ,'DT_CADASTRO'   ,'LOGIN_CADASTRO',;
                              'FL_PAGAMENTO'                                    })

                aadd(laSAVE, {laPASTA[2,1]    ,lnAI            ,laDADOS[ii,2]   ,;
                              laDADOS[ii,10]   ,laDADOS[ii,2]   ,'Plataforma'    ,;
                              'A'                                               })

                if db_insert(laSAVE,'mvt_despesa_pagamento') == -1
                   db_rollback()
                   error_sys(db_error())
                else
                   lcLOG += 'Registro importado com sucesso. Pasta Nr. '+alltrim(str(laPASTA[2,1])) + ', Sinistro '+alltrim(laDADOS[ii,1])+NEWLINE
                endif
	  	       endif
	  	       

            elseif (laDADOS[ii,9]) == '05' .or. (laDADOS[ii,9]) == '07' 
            
            elseif (laDADOS[ii,9]) == '56' 

            elseif (laDADOS[ii,9]) == '12' .or.  (laDADOS[ii,9]) == '13' .or. (laDADOS[ii,9]) == '14' .or. (laDADOS[ii,9]) == '15'
*//'12' = Pagamento de gastos com sinistro 
*//'13' = Pagamento de gastos com juridico 
*//'14' = Pagamento de gastos com ressarcimento
*//'15' = Pagamento de gastos com salvados

*// tipo de gasto 1 = despesas
*// tipo de gasto 2 = honorarios

                   if (laDADOS[II,52]) == '1'  // tipo de gasto 1 = despesas
                   endif 
                   if (laDADOS[II,52]) == '2'  // tipo de gasto 2 = honorarios
                   endif


            elseif (laDADOS[ii,9]) == '29' .or.  (laDADOS[ii,9]) == '30' .or. (laDADOS[ii,9]) == '31' .or. (laDADOS[ii,9]) == '32'
*//'29' = Devolução de despesas com sinistro 
*//'30' = Devolução de despesas com juridico 
*//'31' = Devolução de despesas com ressarcimento
*//'32' = Devolução de despesas com salvados

                   if (laDADOS[II,52]) == '1'  
                   endif 
                   if (laDADOS[II,52]) == '2' 
                   endif

            elseif (laDADOS[ii,9]) == '28' // Devolução de sinistro pendente e liquidado
            else
                qout("Erro na gravação do arquivo de LOG.")
                return(.f.)  
            endif
          else
             if substr(laDADOS[ii,3) == '2' // Seleciona o tipo 2 judicial - template sinistro - somente update
                laSAVE := {}
                aadd(laSAVE, {'NR_PASTA_ARQUIVO'    ,'DT_ENTRADA'          ,;  
                              'LOGIN_CADASTRO'      ,'NR_PROCESSO'         ,'DT_CADASTRO'         ,;
                              'CIP_EMPRESA'         ,'POSICAO_EMPRESA'     ,'DT_CITACAO'          ,;
                              'UF'                  ,'CIP_PARTE_CONTRARIA'})
                           
**                              if laDADOS[ii,50] == '02' // SINISTRO - JUDICIAL - SOMENTE UPDATE
                aadd(laSAVE, {laDADOS[ii,50]                 ,laDADOS[ii,8]   ,;
                              'interface'                    ,laDADOS[ii,50]                 ,laDADOS[ii,8]   ,;
                              '5'                            ,' '                            ,laDADOS[ii,8]   ,;
                              ' '                            ,' '  }) // posicao da empresa fixa para teste com 5
** localizar o nr_pasta_arquivo para carregar o nr_pasta 
*  se não for localizado inserir no arquivo de expurgo
*           
                if db_update(laSAVE,'pasta',{"NR_PASTA_ARQUIVO = " + alltrim( str( laDADOS[ii,2] "AND TP_PASTA = "+DLAP+"Sinistro"+DLAP) ) }) == -1
                   db_rollback()
                   error_sys(db_error())
                else
*                // processo não localizado - grava na pendencia
                    laSAVE := {}
                    aadd(laSAVE, {'NR_PASTA_ARQUIVO'    ,'DT_ENTRADA'          ,;  
                                    'LOGIN_CADASTRO'      ,'NR_PROCESSO'         ,'DT_CADASTRO'         ,;
                                    'CIP_EMPRESA'         ,'POSICAO_EMPRESA'     ,'DT_CITACAO'          ,;
                                    'UF'                  ,'CIP_PARTE_CONTRARIA'})

                    aadd(laSAVE, {laDADOS[ii,50]                 ,laDADOS[ii,8]   ,;
                                   'interface'                    ,laDADOS[ii,50]                 ,laDADOS[ii,8]   ,;
                                   '5'                            ,' '                            ,laDADOS[ii,8]   ,;
                                   ' '                            ,' '  }) // posicao da empresa fixa para teste com 5
                   
                   if db_insert(laSAVE,'pasta_pendencia', ) }) == -1
                      db_rollback()
                      error_sys(db_error())
        	            qout("Erro na gravação do arquivo de LOG.")
                      return(.f.)  
                   endif
                endif   
            else
                qout("Erro na gravação do arquivo de LOG.")
                return(.f.)  
            endif
         endif             
      enddo
      if FWrite(lnHAND1,lcLOG) <= 0
       	qout("Erro na gravação do arquivo de LOG.")
         return(.f.)
      endif
      fclose(lnHAND1)
      db_commit()
   endif
   fclose(lnHAND)

      next ii
      lnHAND1 := fcreate('plataforma_import.log', 0)
      if lnHAND1 >= 0
         if FWrite(lnHAND1,lcLOG) <= 0
            walert("Erro na gravação do arquivo.")
            return(.f.)
         endif
         fclose(lnHAND1)
      endif
   endif
   db_commit()
return


/*
* Function..: gera_cip_pfpj(fcVAL, fcTIPO, fnHAND1)
* Objetivo..: Solicita o numero do cip da tabela pfpj
* Parâmetros: fcVAL   valor do pfpj.PFPJ
              fcTIPO
* Retorno...: CIP de fcVAL recebido
*/
Static Function cip_pfpj(fcVAL, fcTIPO)

       local lcVAL     := '' as string
       local laFIELDS  := {"CIP","NR_CONTROLE"}                        // colunas a serem geradas no select
       local laWHERE   := {"PFPJ like '%"+alltrim(fcVAL)+"%'" } as array // clausula where para solicitacao de dados ao SNT
       local lcTABLE   := "pfpj"                                       // tabela a serem consultada
       local lcINSERT  := "insert into " + lcTABLE + " (PFPJ, PFPJ_TIPO) VALUES (" as string
       local lcUPDATE  := "update " + lcTABLE + " set CIP = " as string
       local lnRET     := 0 as int
       local laDATA    := {} as array

       if db_select(laFIELDS,lcTABLE,,laWHERE) == -1
          qout("Problemas em db_select. ProcLine: "+alltrim(str(procline()))+" ProcName: "+ProcName())
          qout("Erro Select -> "+db_error())
       endif
       laDATA := db_fetchrow()
       if len(laDATA) > 0
          lcVAL := laDATA[1]
       else
          lcINSERT += "'" + alltrim(fcVAL) + "'" + ",'" + fcTIPO + "')"
          if db_insert({{"PFPJ","PFPJ_TIPOS","LOGIN_CADASTRO","DT_CADASTRO"},;
                        {alltrim(fcVAL),fcTIPO,'Plataforma  ',dtos(date())}},lcTABLE) == -1
             qout("Erro Insert -> "+db_error())
             qout("Ultimo Comando -> " + wset("_LASTSQL"))
             lcVAL := ""
          else
             if db_select(laFIELDS, lcTABLE, ,laWHERE) == -1
                qout("Erro Select -> "+db_error())
                qout("Ultimo Comando -> " + wset("_LASTSQL"))
             endif
             // lendo cada linha do select
             laDATA := db_fetchrow()
             if len(laDATA) > 0
                lcVAL    := strzero(laDATA[2],6,0)
                lcUPDATE += "'" + lcVAL + "' "
                lcUPDATE += "WHERE NR_CONTROLE = " + alltrim(str(laDATA[2]))
                if db_update( { {"CIP"}, {lcVAL} },lcTABLE,{"nr_controle = " + alltrim( str( laDATA[2] ) ) } ) == -1
                   qout("Problemas na atualizacao da tabela PFPJ")
                   qout("Erro Update -> "+db_error())
                   qout("Ultimo Comando -> " + wset("_LASTSQL"))
                   lcVAL := ""
                endif
             else
                qout("Problemas na leitura da tabela PFPJ")
                lcVAL := ""
             endif
          endif
       endif
return (lcVAL)


/*
* Function..: gera_FPagto(fcPAGTO)
* Objetivo..: Solicita a forma de pagamento
* Parâmetros: fcPAGTO descricao da forma de pagamento
* Retorno...: forma de pagamento
*/
Static Function gera_FPagto(fcPAGTO)

       local lcVAL     := '' as string
       local laWHERE   := {"FORMA_PAGAMENTO like '%"+alltrim(fcPAGTO)+"%'" } as array
       local laRESULT    := {} as array

       if db_select({'FORMA_PAGAMENTO'},'forma_pagamento',,laWHERE) == -1
          qout("Problemas em db_select. ProcLine: "+alltrim(str(procline()))+" ProcName: "+ProcName())
          qout("Erro Select -> "+db_error())
       endif
       laRESULT := db_fetchrow()
       if len(laRESULT) > 0
          lcVAL := laRESULT[1]
       else
          if db_insert({{'FORMA_PAGAMENTO'},{alltrim(fcPAGTO)}},'forma_pagamento') == -1
             qout("Erro Insert -> "+db_error())
             qout("Ultimo Comando -> " + wset("_LASTSQL"))
          else
             lcVAL := alltrim(fcPAGTO)
          endif
       endif
return (lcVAL)


/*
* Function..: gera_GrupoDesp(fcDESP)
* Objetivo..: Busca o Cod. do Grupo da Despesa
* Parâmetros: fcDESP -> Codigo da Despesa
* Retorno...: Grupo da Despesa
*/
Static Function gera_GrupoDesp(fcDESP)

       local laRES := {} as array

       if db_select({'CD_GRP_DESPESA'},'despesa',,{'cd_despesa = '+DLAP+alltrim(fcDESP)+DLAP}) == -1
          qout("Problemas em db_select. ProcLine: "+alltrim(str(procline()))+" ProcName: "+ProcName())
          qout("Erro Select -> "+db_error())
       endif
       laRES := db_fetchrow()
       if len(laRES) > 0
          return (laRES[1])
       endif
return ('')


/*
* Function..: gera_pasta(fcVAL, fnHAND1)
* Objetivo..: Solicita o da pasta
* Parâmetros: fcVAL   valor do pasta.NR_PROCESSO
* Retorno...: NR_PASTA de fcVAL recebido
*/
Static Function gera_pasta(fcVAL)

local lcVAL     := '' as string
       local laFIELDS  := {"NR_PASTA","LOGIN_CADASTRO","DT_CADASTRO","TP_PASTA","NR_PROCESSO","CIP_EMPRESA","POSICAO_EMPRESA","DT_CITACAO","UF","CIP_PARTE_CONTRARIA","NR_PASTA_ARQUIVO"}    // colunas a serem geradas no select
       local laWHERE   := {"NR_PROCESSO like '%"+alltrim(fcVAL)+"%'" } as array // clausula where para solicitacao de dados ao SNT
       local lcTABLE   := "pasta"                                       // tabela a serem consultada
       local lcINSERT  := "insert into " + lcTABLE + " (NR_PASTA,LOGIN_CADASTRO,DT_CADASTRO,TP_PASTA,NR_PROCESSO,CIP_EMPRESA,POSICAO_EMPRESA,DT_CITACAO,UF,CIP_PARTE_CONTRARIA,NR_PASTA_ARQUIVO) VALUES (" as string
       local lcUPDATE  := "update " + lcTABLE + " set NR_PROCESSO = " as string
       local lnRET     := 0 as int
       local laDATA    := {} as array

       if db_select(laFIELDS,lcTABLE,,laWHERE) == -1
          qout("Problemas em db_select. ProcLine: "+alltrim(str(procline()))+" ProcName: "+ProcName())
          qout("Erro Select -> "+db_error())
       endif
       laDATA := db_fetchrow()
       if len(laDATA) > 0
          lcVAL := laDATA[1]
       else
          lcINSERT += "'" + alltrim(fcVAL) + "'" + ",'" + fcTIPO + "')"
          if db_insert({{"NR_PASTA","LOGIN_CADASTRO","DT_CADASTRO","TP_PASTA","NR_PROCESSO","CIP_EMPRESA","POSICAO_EMPRESA","DT_CITACAO","UF","CIP_PARTE_CONTRARIA","NR_PASTA_ARQUIVO"},;
                        {alltrim(fcVAL),'Plataforma',laDADOS[ii,8],'Ressarcimento',laDADOS[ii,50],'5','Autor',laDADOS[ii,8],'SP','5',laDADOS[ii,50]}},lcTABLE) == -1
             qout("Erro Insert -> "+db_error())
             qout("Ultimo Comando -> " + wset("_LASTSQL"))
             lcVAL := ""
          else
             if db_select(laFIELDS, lcTABLE, ,laWHERE) == -1
                qout("Erro Select -> "+db_error())
                qout("Ultimo Comando -> " + wset("_LASTSQL"))
             endif
             // lendo cada linha do select
             laDATA := db_fetchrow()
             if len(laDATA) > 0
                lcVAL    := laDATA[5]
                lcUPDATE += "'" + lcVAL + "' "
                lcUPDATE += "WHERE NR_PROCESSO = " + alltrim(str(laDATA[5]))
                if db_update( { {"PASTA"}, {lcVAL} },lcTABLE,{"nr_processo = " + alltrim( str( laDATA[5] ) ) } ) == -1
                   qout("Problemas na atualizacao da tabela Pasta")
                   qout("Erro Update -> "+db_error())
                   qout("Ultimo Comando -> " + wset("_LASTSQL"))
                   lcVAL := ""
                endif
             else
                qout("Problemas na leitura da tabela PASTA")
                lcVAL := ""
             endif
          endif
       endif
return (lcVAL)



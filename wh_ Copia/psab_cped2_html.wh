/*

Project      : isj_43
Program      : psab.cped2.html
Function     : psab_cped2_html
Created on   : 16-Nov-2010   11:16:27
Descripition :

*/

   local lcTABLE       := 'pasta' ,;
         lcFLWEB       := WGet('FL_INTERFACEWEB','C') ,;
         lcFLGEM       := WGet('FL_INTERFACEGEM','C') ,;
         lcPROGRAM     := 'psab_cped2_html',;
         lcNR_ROW      := '1',;
         lcSEGURO      := '0',;
         lcTP_EXP      := '' ,;
         lcRELAC       := '' ,;
         lcWHERE       := '' ,;
         lcWHEREDETAL  := '' ,;
         lcWHEREOCOR   := '' ,;
         lcWHEREDESP   := '' ,;
         lcAUX         := '' ,;
         lcAUX2        := '' ,;
         lcVAR         := '' ,;
         lcMSG         := '' ,;
         lcPC_RISCO    := '' ,;
         lcDT          := '' ,;
         lcDT_RISCO    := '' ,;
         lcCD_INDICE   := '' ,;
         lcOCORPAI     := '' ,;
         lcOBSPAI      := '' ,;
         lcACHO        := '' ,;
         lcFLSUC       := '' as string

   local laFIELDS       := {} ,;
         laFIELDS_AUX   := {} ,;
         laFIELDSDETAL  := {} ,;
         laRESULT       := {} ,;
         laRESULTDETAL  := {} ,;
         laRESULTPEDDT  := {} ,;
         laMVT_DESPPED  := {} ,;
         laSAVE         := {} ,;
         laSAVE_AUX     := {} ,;
         laSAVELOG      := {} ,;
         laSAVELOG_AUX  := {} ,;
         laPEDIDO_ATUAL := {} ,;
         laCAMPO        := {} ,;
         laRESULT_PAS   := {} ,;
         laRESULT_OCOR  := {} ,;
         laLINHA_ATUAL  := {} ,;
         laVLATUAL      := {} ,;
         laTMP          := {} ,;
         laRESPAI       := {} ,;
         laCONFPAS      := {} ,;
         laOBRIGA       := {} ,; 
         laFOREIGN      := {} as array

   local ii            := 0 ,;
         xx            := 0 ,;
         zz            := 0 ,;
         qq            := 0 ,;
         yy            := 0 ,;
         lnPOS         := 0 ,;
         lnSAVE        := 0 ,;
         lnLINHASAVE   := 0 ,;
         lnCONT_CAMPOS := 0 ,;    // Qtos Campos são replicáveis Pai p/ Filho
         lnULTIMO      := 0 ,;
         lnNRCSUC      := 0 as int

   local lnVTR             := 0.00 ,; //Total VL_RISCO
         lnVTC             := 0.00 ,; //Total VL_CORRECAO
         lnVTJ             := 0.00 ,; //Total VL_JURO
         lnVTA             := 0.00 ,; //Total VL_ATUALIZADO
         lnVA              := 0.00 ,;
         lnVTRC            := 0.00 ,;
         lnVRC             := 0.00 ,;
         lnVCDIFF          := 0.00 ,;
         lnVJDIFF          := 0.00 ,;
         lnVCSUC           := 0.00 ,;
         lnVL_ATUAL        := 0.00 ,;
         lnPC_RISCO        := 0.00 ,;
         lnPCRISCO2        := 0.00 ,;
         lnRISCO           := 0.00 ,;
         lnVL_RISCO_ORIGEM := 0.00 ,;
         lnVLTOTRISCO      := 0.00 ,;
         lnRISCO_CALC      := 0.00 ,;
         lnDIF             := 0.00 ,;
         lnARED            := 0.00 ,;
         lnVJSUC           := 0.00 as numeric

   local lnPED_ORIGEM := 0 as int

   local llAUX       := .t. ,;
         llRETURN    := .t. ,;
         llENCERRADA := .f.,;
         llERROR     := .f.,;
         llALTPED    := .f.,;
         llErro      := .f. as logical

   local ldDTSUC as date



   local lcNR_PASTA    := WGet('NR_PASTA','C') ,;
         lcNR_CONTROLE := WGet('NR_CONTROLE','C') ,;
         lcTP_PASTA    := WGet('TP_PASTA','C') ,;
         lcACTION      := upper(WGet('ACTION','C')) as string

   laFIELDS      := {'PC_RISCO',;
                     'CD_MOEDA',;
                     'VL_CAUSA',;
                     'VL_ACAO',;
                     'VL_RISCO',;
                     'VL_RISCO2',;
                     'VL_RISCO_HONORARIO',;
                     'PC_SUCUMBENCIA_CONDENACAO',;
                     'VL_MULTA',;
                     'VL_AUTOR',;
                     'CD_INDICE',;
                     'DT_ATUALIZACAO',;
                     'VL_PROVISAO_CALC',;
                     'FL_PASTA'}


   wac_tp_pasta(lcTP_PASTA)               // Função para verificação de permissões por pasta, encontra-se na func.wic
   make_psthead(lcNR_PASTA,lcTP_PASTA)    //Cabeçalho
   
   laOBRIGA:={'NM_INDICE','DT_RISCO','VL_RISCO','OCOR_PEDIDO'}

   init_reqfield(WSet('_USER_INTERFACE'),laOBRIGA)
   *** ATENÇÃO A OBRIGATORIEDADE TAMBE E MARCADA NA FUNCAO pegalabel().
   
   AbasPerfil(lcTP_PASTA, laFIELDS)

   *Exibe os botÃµes permitidos   
   *gbWAC_READ   = PODE LER 
   *gbWAC_CREATE = PODE CRIAR NOVO
   *gbWAC_DELETE = PODE APAGAR
   *gbWAC_WRITE  = PODE GRAVAR
  
   if gbWAC_CREATE
      WPut('ifNOVO',.t.)
   endif
   if gbWAC_DELETE
      
   endif
   if gbWAC_WRITE
      WPut('ifMANU',.t.)
      WPut('ifSALVAR',.t.)
   endif

   if psab_find(lcTP_PASTA,'psab.seg.cont.sinistro.html')
      WPut('ifSINISTRO','T')
      //---------- Verificando o Layout de Tela.
      if db_select({'LAYOUT_PASTA'},'pasta_config',,{'TP_PASTA = '+DLAP+lcTP_PASTA+DLAP+'and (LAYOUT_PASTA like '+DLAP+'%Exp%'+DLAP+' or LAYOUT_PASTA like '+DLAP+'%exp%'+DLAP+')'}) == -1
         error_sys(db_error())
      endif
      laRES_EXP := db_fetchrow()

      if len(laRES_EXP) > 0
         WPut('ifEXPEDIENTE','T')
      else
         WPut('ifEXPEDIENTE','F')
      endif
   else
      WPut('ifSINISTRO','F')
      WPut('ifEXPEDIENTE','F')
   endif



   if lcACTION == 'SAVENEW' .and. gbWAC_CREATE


      laSAVE      := {'NR_PASTA',;
                      'PEDIDO_PROCESSO',;
                      'VL_RISCO',;
                      'PC_RISCO',;
                      'VL_RISCO_CALC',;
                      'DT_RISCO',;
                      'FL_CALCULO',;
                      'DT_MOVTO_PED',;
                      'COMENTARIOS_PED',;
                      'OCOR_PEDIDO',;
                      'POSSIVEL',;
                      'PROVAVEL',;
                      'REMOTO',;
                      'NR_CONTROLE_SEGURO',;
                      'TP_EXPEDIENTE'}

      laRESULT :={}

      if WGet('PED_NOVOS','C')<>''
         laRESULT := str2array(WGet('PED_NOVOS','C'),'|') 
         aadd(laLINHA_ATUAL,laSAVE)
      endif
      
      for ii := 1 to len(laRESULT)
          aadd(laTMP,str2array(laRESULT[ii],'|'))

          for zz := 1 to len(laTMP[ii])
              lcAUX:=array2str(laTMP[ii],',')
              aadd(laLINHA_ATUAL,str2array(lcAUX,','))
          next zz

      next ii

      if len(laLINHA_ATUAL)>1
         geraprevisao(laLINHA_ATUAL)
      endif

   endif

   if lcACTION == 'SAVEALTER' .and. gbWAC_WRITE

      laSAVE      := {'NR_PASTA',;
                      'NR_CONTROLE_PAI',;
                      'NR_CONTROLE',;
                      'PEDIDO_PROCESSO',;
                      'OCOR_PEDIDO',;
                      'ACAO',;
                      'DT_RISCO',;
                      'VL_RISCO_CALC',;
                      'VL_CORRECAO',;
                      'VL_JUROS',;
                      'FL_CALCULO',;
                      'COMENTARIOS_PED',;
                      'VL_RISCO',;
                      'ZERA_SALDO',;
                      'PEDIDO_PAI',;
                      'NR_CONTROLE_SEGURO'}

      laRESULT := str2array(WGet('PED_MANUT','C'),'|')

      aadd(laLINHA_ATUAL,laSAVE)

      for ii := 1 to len(laRESULT)
          aadd(laTMP,str2array(laRESULT[ii],'|'))

          for zz := 1 to len(laTMP[ii])
              lcAUX:=array2str(laTMP[ii],',')
              aadd(laLINHA_ATUAL,str2array(lcAUX,','))
          next zz

      next ii

      if len(laLINHA_ATUAL)>1
         atuprevisao(laLINHA_ATUAL)
      endif
   endif


   if lcACTION == 'SAVEPASTA' .and. gbWAC_WRITE

      if verif_reqfield(WSet('_USER_INTERFACE'),laOBRIGA)

      laFIELDS_AUX  := {'CD_MOEDA',;
                        'VL_CAUSA',;
                        'VL_ACAO',;
                        'VL_RISCO',;
                        'VL_RISCO2',;
                        'VL_MULTA',;
                        'CD_INDICE',;
                        'DT_ATUALIZACAO'}

      aadd(laCONFPAS,laFIELDS_AUX)

      laFIELDS_AUX  := {WGet('CD_MOEDA','N'),;
                        WGet('VL_CAUSA','N'),;
                        WGet('VL_ACAO','N'),;
                        WGet('VL_RISCO','N'),;
                        WGet('VL_RISCO2','N'),;
                        WGet('VL_MULTA','N'),;
                        WGet('CD_INDICE','N'),;
                        WGet('DT_ATUALIZACAO','D')}

      aadd(laCONFPAS,laFIELDS_AUX)

      laDIFFROW := db_diffrow(laCONFPAS,'pasta','NR_PASTA='+WGet('NR_PASTA','C'))

      if len(laDIFFROW)>0

         lcACHO    :='N'

         laCONFPAS :={}

         laSAVE_AUX:={}
         *** cria linha com os fields alterados
         for yy:=1 to len(laDIFFROW)
             if laDIFFROW[YY,1] == 'CD_INDICE'
                lcACHO:='S'
             endif
             aadd(laSAVE_AUX,laDIFFROW[YY,1])
         next yy
         aadd(laCONFPAS,laSAVE_AUX)


         laSAVE_AUX:={}
         *** cria linha com o valor dos campos alterados
         for yy:=1 to len(laDIFFROW)
             aadd(laSAVE_AUX,laDIFFROW[YY,3])
         next yy
         aadd(laCONFPAS,laSAVE_AUX)

         *** indice alterado recalcula todas as provisoes
         if lcACHO=='S'
            EstiRecalcula(WGet('TP_PASTA','C'),WGet('NR_PASTA','C'),val(WGet('CD_INDICE','C')),0)
         endif      
        
         *grava log de alteração
         lcWHERE:= 'NR_PASTA='+WGet('NR_PASTA','C')
         if psab_logs(laCONFPAS,'pasta',lcWHERE,WGet('NR_PASTA','C'),'Pedidos') == .f.
            error_sys(db_error())
         endif

         lcWHERE:= 'NR_PASTA='+WGet('NR_PASTA','C')
         if db_update(laCONFPAS,'pasta',{lcWHERE}) == -1
            error_sys(db_error())
         endif

      endif
      endif
   endif
   
   **if lcACTION == 'NEW' .and. gbWAC_READ
   if gbWAC_READ
      pegalabel('pasta_cdetal_pedidos','FIELD_DETAL','LABEL_DETAL','FIELD_OBRI',WSet('_USER_INTERFACE'),laOBRIGA)
      if db_select(laFIELDS,'pasta',,{'NR_PASTA='+lcNR_PASTA}) == -1
         error_sys(db_error())
      endif
      laRESULT := db_fetchall()

      if len(laRESULT) > 1

         db2Put(laRESULT) //manda dados da pasta para o html

         carrega_moeda()
         carrega_indice()

         WPut('NM_MOEDA',laRESULT[2,db_fetchncol(laRESULT,'CD_MOEDA')])
         WPut('NM_INDICE',laRESULT[2,db_fetchncol(laRESULT,'CD_INDICE')])

         carregaobj(lcTP_PASTA)
         valores_padroes(lcNR_PASTA,lcTP_PASTA)
         carregapedidos(lcNR_PASTA,lcTP_PASTA)
         carregaseg()

         laFOREIGN := {{'xCD_MOEDA','CD_MOEDA','moeda','NM_MOEDA'},;
                       {'xCD_INDICE','CD_INDICE','indice_reajuste','NM_INDICE'}}

         /* Selecionando Relacionamentos */
         for ii := 1 to len(laFOREIGN)
            lnPOS := ascan(laRESULT[1],laFOREIGN[ii,1])
            if lnPOS > 0

               if valtype(laRESULT[2,lnPOS]) == 'N'
                  if laRESULT[2,lnPOS] == 0
                     llAUX := .f.
                  else
                     lcAUX := laFOREIGN[ii,2]+'='+str(laRESULT[2,lnPOS])
                     llAUX := .t.
                  endif
               else
                  if empty(alltrim(laRESULT[2,lnPOS]))
                     llAUX := .f.
                  else
                     lcAUX := laFOREIGN[ii,2]+'='+DLAP+laRESULT[2,lnPOS]+DLAP
                     llAUX := .t.
                  endif
               endif

               if llAUX
                  if db_select({laFOREIGN[ii,4]},laFOREIGN[ii,3],,{lcAUX}) == -1
                     error_sys(db_error())
                  endif

                  db2Put(db_fetchall())
               endif
            endif
         next ii

      endif

   endif

return

*************************************
static function carregaobj()
*************************************
local lcTABLEDET := '' ,;
      lcWHEREDET := '' ,;
      lcOBJ      := '' as string
      
local laRESULT := {} as array

local ii := 0 as int

lcTABLEDET      := 'pasta_objeto'
lcWHEREDET      := 'TP_PASTA = '+DLAP+WGet('TP_PASTA','C')+DLAP+' and FL_ATIVO <>'+DLAP+'I'+DLAP+' and FL_VISIVEL ='+DLAP+'W'+DLAP+' and OBJETO <>'+DLAP+'Sucumbência de Condenação'+DLAP

if db_select({'OBJETO'},;
              lcTABLEDET,,;
              {lcWHEREDET},{'OBJETO'}) == -1
   error_sys(db_error())
endif
laRESULT := db_fetchall()


amkgedico(lcTABLEDET,WGet('TP_PASTA','C'))

lcOBJ:=''
for ii := 2 to len(laRESULT)
    if lcOBJ==''
       lcOBJ:=laRESULT[ii,1]
      else
       lcOBJ:=lcOBJ+'|'+laRESULT[ii,1]
    endif        
next ii
WPut('OBJETOS',lcOBJ)

return(nil)


*************************************
static function atuprevisao(laALTER)
*************************************

local lcFL_CALCULO      := '' ,;
      lcPEDIDO_PROCESSO := '' ,;
      lcCOMENTARIOS_PED := '' ,;
      lcWHERE           := '' ,;
      lcOCOR_PEDIDO     := '' ,;
      lcCOLUNA          := '' ,;
      lcOBS             := '' ,;
      lcALT_DT_RISCO    := 'N',;
      lcALT_FL_CALCULO  := 'N',;
      lcALT_PC_RISCO    := 'N',;
      lcZERA_SALDO      := 'N',;
      lcFL_LOG_EST      := 'N',;
      lcSALDO_ZERO      := 'N' as string
      
local lnVL_RISCO        := 0.00 ,;
      lnDVL_RISCO       := 0.00 ,;
      lnSVL_CALC        := 0.00 ,;
      lnVL_CALC         := 0.00 ,;
      lnSVL_CORR        := 0.00 ,;
      lnVL_CORR         := 0.00 ,;
      lnSVL_JURO        := 0.00 ,;
      lnVL_JURO         := 0.00 ,;
      lnPC_RISCO        := 0.00 ,;
      lnXPC_RISCO       := 0.00 ,;
      lnVL_AACALC       := 0.00 ,;
      lnVL_CALCD        := 0.00 ,;
      lnVL_CORRD        := 0.00 ,;
      lnVL_JUROD        := 0.00 as numeric
      
local ii                := 0 ,;
      xx                := 0 ,;
      yy                := 0 ,;
      lnNR_CONTROLE     := 0 as int

local laFIELDS          := {} ,;
      laDFIELDS         := {} ,;
      laSAVE            := {} ,;
      laSAVE_AUX        := {} ,;
      laSAVE_DET        := {} ,;
      laSAVE_COR        := {} ,;
      laDIFFROW         := {} ,;
      laCONFPED         := {} ,;
      laCONFPAI         := {} ,;
      laRESULT          := {} ,;
      laSAVE_XDET       := {} ,;
      la2SAVE_AUX       := {} ,;
      laDFC             := {} ,;
      laCFC             := {} ,;
      laCONFFIL         := {} as array

local ldDT_RISCO as date

lnNR_PEDIDO_ORIGEM := 0

laFIELDS   := {'NR_PASTA',;
               'NR_CONTROLE',;
               'PEDIDO_PROCESSO',;
               'DT_MOVTO_PED',;
               'DT_RISCO',;
               'VL_RISCO',;
               'VL_RISCO_CALC',;
               'PC_RISCO',;
               'VL_CORRECAO',;
               'VL_JUROS',;
               'FL_CALCULO',;
               'COMENTARIOS_PED',;
               'OCOR_PEDIDO',;
               'DT_ALTERACAO',;
               'HR_ALTERACAO',;
               'LOGIN_CADASTRO',;
               'FL_LOG_ESTIMATIVA'}

aadd(laSAVE_DET,laFIELDS)

laDFC:= aclone(laSAVE_DET)
aadd(laDFC[1],'NR_CONTROLE_SEGURO')



laFIELDS   := {'NR_PASTA',;
               'NR_CONTROLE',;
               'PEDIDO_PROCESSO',;
               'DT_MOVTO_PED',;
               'DT_RISCO',;
               'VL_RISCO',;
               'VL_RISCO_CALC',;
               'PC_RISCO',;
               'VL_CORRECAO',;
               'VL_JUROS',;
               'FL_CALCULO',;
               'OCOR_PEDIDO',;
               'DT_ALTERACAO',;
               'HR_ALTERACAO',;
               'LOGIN_CADASTRO',;
               'FL_LOG_ESTIMATIVA'}
               
aadd(laSAVE_COR,laFIELDS)

laCFC:= aclone(laSAVE_COR)
aadd(laCFC[1],'NR_CONTROLE_SEGURO')


lnNR_PEDIDO_ORIGEM:=0

for ii := 2 to len(laALTER) //atenção laALTER so contem as linhas de estimativa

    *** dados de cada estimativa
    lnNR_CONTROLE := VAL(laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE')])

    lnVL_RISCO    := VAL(laALTER[ii,db_fetchncol(laALTER,'VL_RISCO')])
    ldDT_RISCO    := ctod(laALTER[ii,db_fetchncol(laALTER,'DT_RISCO')])
    lnVL_CALC     := VAL(laALTER[ii,db_fetchncol(laALTER,'VL_RISCO_CALC')])

    *** agora o PC_RISCO e apenas informativo não e mais utilizado para calculo
    if lnVL_RISCO=lnVL_CALC
       lnPC_RISCO    :=100
    else   
       lnPC_RISCO    := (lnVL_CALC * 100) / lnVL_RISCO     
       lnPC_RISCO    := round(lnPC_RISCO,0)
    endif

    lnVL_CORR     := VAL(laALTER[ii,db_fetchncol(laALTER,'VL_CORRECAO')])
    lnVL_JURO     := VAL(laALTER[ii,db_fetchncol(laALTER,'VL_JUROS')])

    if laALTER[ii,db_fetchncol(laALTER,'FL_CALCULO')] == 'true'
       lcFL_CALCULO:='S'
      else
       lcFL_CALCULO:=''
    endif
    
    if laALTER[ii,db_fetchncol(laALTER,'ZERA_SALDO')] == 'true'
       lcZERA_SALDO:='S'
      else
       lcZERA_SALDO:=''
    endif  

    if lnNR_PEDIDO_ORIGEM <> VAL(laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE_PAI')])


       *** verifica se dados do lançamento pai foi alterado
       lnNR_PEDIDO_ORIGEM := VAL(laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE_PAI')])

       laCONFPAI  := {}

       laFIELDS    := {'DT_RISCO','VL_RISCO'}
       aadd(laCONFPAI,laFIELDS)

       laFIELDS    := {ldDT_RISCO,lnVL_RISCO}
       aadd(laCONFPAI,laFIELDS)

       laDIFFROW := db_diffrow(laCONFPAI,'pasta_cpedidos','NR_CONTROLE='+laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE_PAI')])

       ** laDIFFROW
       **  campo alterado                   dados anteriores                 novos dados
       **| DT_RISCO                       | 08/12/2009                     | 07/10/2014                    |

       lcSALDO_ZERO := 'N'
       
       if len(laDIFFROW)>0 //dados do lançamento pai foi alterado deve fazer _update

          *wout('vai atualizar no pai controle: '+ STR(lnNR_PEDIDO_ORIGEM))
          *debug2(laCONFPAI,,30)

          *** estava sem valor de risco      
          if (laDIFFROW[1,1]=='VL_RISCO' .and. VAL(laDIFFROW[1,2]) == 0)
             lcSALDO_ZERO := 'S'             
          endif
          
          if laDIFFROW[1,1]=='VL_RISCO'
             lcOBS:='Foi alterado o valor do risco!'
             lnDVL_RISCO:= VAL(str(laDIFFROW[1,3])) - VAL(str(laDIFFROW[1,2]))
          endif
          
          if laDIFFROW[1,1]=='DT_RISCO'
             lcOBS:='Foi alterada a data do risco!'
          endif
          
          
          *** cria detal do pai
          laSAVE_AUX    := {WGet('NR_PASTA','C'),;
                               laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE_PAI')],;
                               laALTER[ii,db_fetchncol(laALTER,'PEDIDO_PAI')],;
                               date(),;
                               ldDT_RISCO,;
                               lnDVL_RISCO,;
                               0,;
                               lnPC_RISCO,;
                               0,;
                               0,;
                               lcFL_CALCULO,;
                               lcOBS,;
                               '',;
                               date(),;
                               time(),;
                               gcLOGIN,;
                               'S'}              
          aadd(laSAVE_DET,laSAVE_AUX)  //utilizado no _insert


          *** pega pai para contabilizar
          la2SAVE_AUX   := {WGet('NR_PASTA','C'),;
                               laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE_PAI')],;
                               laALTER[ii,db_fetchncol(laALTER,'PEDIDO_PAI')],;
                               date(),;
                               ldDT_RISCO,;
                               lnDVL_RISCO,;
                               0,;
                               lnPC_RISCO,;
                               0,;
                               0,;
                               lcFL_CALCULO,;
                               lcOBS,;
                               '',;
                               date(),;
                               time(),;
                               gcLOGIN,;
                               'S',;
                               laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE_SEGURO')]}

          aadd(laDFC,la2SAVE_AUX)
          aadd(laCFC,la2SAVE_AUX)

          ** grava log de alteração do pai
          lcWHERE:= 'NR_CONTROLE='+STR(lnNR_PEDIDO_ORIGEM)
          if psab_logs(laCONFPAI,'pasta_cpedidos',lcWHERE,WGet('NR_PASTA','C'),'Pedidos') == .f.
             error_sys(db_error())
          endif

          lcWHERE:= 'NR_CONTROLE='+STR(lnNR_PEDIDO_ORIGEM)
          if db_update(laCONFPAI,'pasta_cpedidos',{lcWHERE}) == -1
             error_sys(db_error())
          endif
       else

          *** pega pai para contabilizar
          la2SAVE_AUX   := {WGet('NR_PASTA','C'),;
                               laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE_PAI')],;
                               laALTER[ii,db_fetchncol(laALTER,'PEDIDO_PAI')],;
                               date(),;
                               ldDT_RISCO,;
                               0,;
                               0,;
                               0,;
                               0,;
                               0,;
                               '',;
                               '',;
                               '',;
                               date(),;
                               time(),;
                               gcLOGIN,;
                               'S',;
                               laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE_SEGURO')]}

          aadd(laDFC,la2SAVE_AUX)
          aadd(laCFC,la2SAVE_AUX)

          lnVL_RISCO=0

       endif

    endif

    laCONFFIL   := {}
    laFIELDS    := {'VL_RISCO_CALC',;
                    'VL_CORRECAO',;
                    'VL_JUROS',;
                    'DT_RISCO',;
                    'FL_CALCULO',;
                    'PC_RISCO'}

    aadd(laCONFFIL,laFIELDS)

    laFIELDS    := {lnVL_CALC,;
                    lnVL_CORR,;
                    lnVL_JURO,;
                    ldDT_RISCO,;
                    lcFL_CALCULO,;
                    lnPC_RISCO}

    aadd(laCONFFIL,laFIELDS)

    laDIFFROW := db_diffrow(laCONFFIL,'pasta_cpedidos','NR_CONTROLE='+STR(lnNR_CONTROLE))
    
    
    *** so grava quando exite diferença entre lançamento anterior e o atual
    *** mas se mandou zerar o saldo e não existiu diferença indica que pagamento e total (baixa o saldo)    
    lcBAIXA_SAL:='S'
    if lcZERA_SALDO=='S'
       *** verifica se algum valor foi alterado
       *** se algum foi alterado não zera total, zera so a culuna que tem diferença       
       
       lcCOLUNA :=''
       laAUXF   :={}
       laAUXV   :={}
       laAUXDIF :={}
       
       laCONFPED:={}
              
       for xx:=1 to len(laDIFFROW)
           if laDIFFROW[xx,1]=='VL_RISCO_CALC'
              lcBAIXA_SAL:='N'
              aadd(laAUXF,'VL_RISCO_CALC')
              aadd(laAUXV,0)
              aadd(laAUXDIF,{'VL_RISCO_CALC',laDIFFROW[xx,2],laDIFFROW[xx,2]})
           endif
           if laDIFFROW[xx,1]=='VL_CORRECAO'
              lcBAIXA_SAL:='N'
              aadd(laAUXF,'VL_CORRECAO')
              aadd(laAUXV,0)
              aadd(laAUXDIF,{'VL_CORRECAO',laDIFFROW[xx,2],laDIFFROW[xx,2]})
           endif
           if laDIFFROW[xx,1]=='VL_JUROS'
              lcBAIXA_SAL:='N'
              aadd(laAUXF,'VL_JUROS')
              aadd(laAUXV,0)
              aadd(laAUXDIF,{'VL_JUROS',laDIFFROW[xx,2],laDIFFROW[xx,2]})
           endif                   
       next xx
      
       if  lcBAIXA_SAL=='S'
          *** se nenhum valor foi alterado baixa o que estiver digitado
          *** aqui forço o laDIFFROW com alteraçoes baixa todas colunas      
          aadd(laDIFFROW,{'VL_RISCO_CALC',lnVL_CALC,lnVL_CALC})
          aadd(laDIFFROW,{'VL_CORRECAO',lnVL_CORR,lnVL_CORR})
          aadd(laDIFFROW,{'VL_JUROS',lnVL_JURO,lnVL_JURO})
         *else
          *laDIFFROW:=laAUXDIF
       endif
       
    endif

    if len(laDIFFROW)>0 //algum campo foi alterado

       lnVL_CALCD       := 0
       lnVL_AACALC      := 0
       lnVL_CORRD       := 0
       lnVL_AACORR      := 0
       lnVL_JUROD       := 0
       lnVL_AAJURO      := 0
       lcALT_DT_RISCO   := 'N'
       lcALT_FL_CALCULO := 'N'
       lcALT_PC_RISCO   := 'N'
       
       for xx:=1 to len(laDIFFROW) 
       
           *** se ação for de substituição
           if laALTER[ii,db_fetchncol(laALTER,'ACAO')] =='S'
              *** se o valor digitado for maior que o que tinha soma a diferença
              if laDIFFROW[xx,3]>laDIFFROW[xx,2]
                 laDIFFROW[xx,3]:=laDIFFROW[xx,3]-laDIFFROW[xx,2]                
                 laALTER[ii,db_fetchncol(laALTER,'ACAO')]:='+'

              else
                 laDIFFROW[xx,3]:=laDIFFROW[xx,2]-laDIFFROW[xx,3]
                 laALTER[ii,db_fetchncol(laALTER,'ACAO')]:='-'
              endif
           endif

           if laDIFFROW[xx,1]=='VL_RISCO_CALC'
              
              if laALTER[ii,db_fetchncol(laALTER,'ACAO')] =='-'
                 lnVL_CALCD:=laDIFFROW[xx,3] * -1
                else
                 lnVL_CALCD:=laDIFFROW[xx,3]
              endif          
           

           endif
           
           if laDIFFROW[xx,1]=='VL_CORRECAO'
           
              if laALTER[ii,db_fetchncol(laALTER,'ACAO')] =='-'
                 lnVL_CORRD:=laDIFFROW[xx,3] * -1
                else
                 lnVL_CORRD:=laDIFFROW[xx,3]
              endif            
           endif
           if laDIFFROW[xx,1]=='VL_JUROS'
              
              if laALTER[ii,db_fetchncol(laALTER,'ACAO')] =='-'
                 lnVL_JUROD:=laDIFFROW[xx,3] * -1
                else
                 lnVL_JUROD:=laDIFFROW[xx,3]
              endif             
           endif

           if laDIFFROW[xx,1]=='DT_RISCO'
              lcALT_DT_RISCO:='S'
           endif
           if laDIFFROW[xx,1]=='FL_CALCULO'
              lcALT_FL_CALCULO:='S'
           endif
           if laDIFFROW[xx,1]=='PC_RISCO'
              lcALT_PC_RISCO:='S'                
           endif
       next xx

          laDFIELDS    := {'VL_RISCO_CALC',;
                           'VL_CORRECAO',;
                           'VL_JUROS'} 
                                  
          lcWHERE:= 'NR_CONTROLE='+STR(lnNR_CONTROLE)
          if db_select(laDFIELDS,'pasta_cpedidos',,{lcWHERE}) == -1
             error_sys(db_error())
          endif
          laRESULT := db_fetchall()

          *** pega saldo antes da movimentação
          lnVL_AACALC:=laRESULT[2,db_fetchncol(laRESULT,'VL_RISCO_CALC')]
          lnVL_AACORR:=laRESULT[2,db_fetchncol(laRESULT,'VL_CORRECAO')]
          lnVL_AAJURO:=laRESULT[2,db_fetchncol(laRESULT,'VL_JUROS')]

       *** se algum valor foi alterado (valor digitado diferente de zero)
       if (lnVL_CALCD<>0 .or. lnVL_CORRD<>0 .or. lnVL_JUROD<>0)    
          *** lança o digitado no pasta_cdetal_pedidos = (movimentado)
          laSAVE_AUX    := {WGet('NR_PASTA','C'),;
                            lnNR_CONTROLE,;
                            laALTER[ii,db_fetchncol(laALTER,'PEDIDO_PROCESSO')],;
                            date(),;
                            ldDT_RISCO,;
                            0,;
                            lnVL_CALCD,;
                            lnPC_RISCO,;
                            lnVL_CORRD,;
                            lnVL_JUROD,;
                            lcFL_CALCULO,;
                            laALTER[ii,db_fetchncol(laALTER,'COMENTARIOS_PED')],;
                            laALTER[ii,db_fetchncol(laALTER,'OCOR_PEDIDO')],;
                            date(),;
                            time(),;
                            gcLOGIN,;
                            'N'}

          aadd(laSAVE_DET,laSAVE_AUX)  //utilizado no _insert

          *** pega para contabilizar

          la2SAVE_AUX    := {WGet('NR_PASTA','C'),;
                            lnNR_CONTROLE,;
                            laALTER[ii,db_fetchncol(laALTER,'PEDIDO_PROCESSO')],;
                            date(),;
                            ldDT_RISCO,;
                            0,;
                            lnVL_CALCD,;
                            lnPC_RISCO,;
                            lnVL_CORRD,;
                            lnVL_JUROD,;
                            lcFL_CALCULO,;
                            laALTER[ii,db_fetchncol(laALTER,'COMENTARIOS_PED')],;
                            laALTER[ii,db_fetchncol(laALTER,'OCOR_PEDIDO')],;
                            date(),;
                            time(),;
                            gcLOGIN,;
                            'N',;
                            laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE_SEGURO')]}

          aadd(laDFC,la2SAVE_AUX)

          if lcZERA_SALDO=='S' 

             *if lcBAIXA_SAL=='S' 
                
                lnVL_CALCD := (lnVL_AACALC + lnVL_CALCD) * -1
                lnVL_CORRD := (lnVL_AACORR + lnVL_CORRD) * -1
                lnVL_JUROD := (lnVL_AAJURO + lnVL_JUROD) * -1
                   
                *** só se existir saldo em alguma coluna
                if lnVL_CALCD !=0 .or. lnVL_CORRD !=0 .or. lnVL_JUROD !=0   
                   *** cria lançamento que zera o saldo no pasta_cdetal_pedidos
                   laSAVE_XDET   := {WGet('NR_PASTA','C'),;
                                     lnNR_CONTROLE,;
                                     laALTER[ii,db_fetchncol(laALTER,'PEDIDO_PROCESSO')],;
                                     date(),;
                                     ldDT_RISCO,;
                                     0,;
                                     lnVL_CALCD,;
                                     lnPC_RISCO,;
                                     lnVL_CORRD,;
                                     lnVL_JUROD,;
                                     lcFL_CALCULO,;
                                     laALTER[ii,db_fetchncol(laALTER,'COMENTARIOS_PED')],;
                                     WGet('OCOR_ESTO','C'),;
                                     date(),;
                                     time(),;
                                     gcLOGIN,;
                                     'N'}
                   
                   aadd(laSAVE_DET,laSAVE_XDET)  //utilizado no _insert

                   *** pega para contabilizar
                   laSAVE_XDET   := {WGet('NR_PASTA','C'),;
                                     lnNR_CONTROLE,;
                                     laALTER[ii,db_fetchncol(laALTER,'PEDIDO_PROCESSO')],;
                                     date(),;
                                     ldDT_RISCO,;
                                     0,;
                                     lnVL_CALCD,;
                                     lnPC_RISCO,;
                                     lnVL_CORRD,;
                                     lnVL_JUROD,;
                                     lcFL_CALCULO,;
                                     laALTER[ii,db_fetchncol(laALTER,'COMENTARIOS_PED')],;
                                     WGet('OCOR_ESTO','C'),;
                                     date(),;
                                     time(),;
                                     gcLOGIN,;
                                     'N',;
                                     laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE_SEGURO')]}


                   aadd(laDFC,laSAVE_XDET)

                endif
                
                *** zera todas colunas
                laCONFPED  :={}                    
                aadd(laCONFPED,laDFIELDS)
                aadd(laCONFPED,{0,0,0})


             ** grava log de alteração zerando saldo
             lcWHERE:= 'NR_CONTROLE='+STR(lnNR_CONTROLE)
             if psab_logs(laCONFPED,'pasta_cpedidos',lcWHERE,WGet('NR_PASTA','C'),'Pedidos') == .f.
                error_sys(db_error())
             endif 
                   
             lcWHERE:= 'NR_CONTROLE='+STR(lnNR_CONTROLE)
             if db_update(laCONFPED,'pasta_cpedidos',{lcWHERE}) == -1
                error_sys(db_error())
             endif 

          endif
       endif    
                
       *** atualiza saldo do pedido
       if lcZERA_SALDO=='' .and. (lnVL_CALCD <> 0 .or. lnVL_CORRD <> 0 .or. lnVL_JUROD <> 0 .or. lcALT_DT_RISCO=='S' .or. lcALT_FL_CALCULO=='S' .or. lcALT_PC_RISCO=='S'  )
                
          laCONFPED :={}  
          laSAVE_AUX:={}
          for yy:=1 to len(laDIFFROW)
              aadd(laSAVE_AUX,laDIFFROW[YY,1])
          next yy
          aadd(laCONFPED,laSAVE_AUX)


          ***joga a diferença no pedido =(saldo)
          laSAVE_AUX:={}
          for yy:=1 to len(laDIFFROW)

                 if laDIFFROW[yy,1]=='VL_RISCO_CALC'                                    
                    if lcSALDO_ZERO == 'N'
                       if laALTER[ii,db_fetchncol(laALTER,'ACAO')] =='-'
                          aadd(laSAVE_AUX,(laDIFFROW[yy,2] - laDIFFROW[yy,3]))
                         else 
                          aadd(laSAVE_AUX,(laDIFFROW[yy,2] + laDIFFROW[yy,3]))
                       endif
                      else 
                       aadd(laSAVE_AUX,laDIFFROW[yy,3])
                    endif                                                              
                 endif                                                              
                 if laDIFFROW[yy,1]=='VL_CORRECAO'                                      
                    if lcSALDO_ZERO == 'N'
                       if laALTER[ii,db_fetchncol(laALTER,'ACAO')] =='-'
                          aadd(laSAVE_AUX,(laDIFFROW[yy,2] - laDIFFROW[yy,3]))
                         else 
                          aadd(laSAVE_AUX,(laDIFFROW[yy,2] + laDIFFROW[yy,3]))
                       endif                    
                      else 
                       aadd(laSAVE_AUX,laDIFFROW[yy,3])
                    endif                                        
                 endif                                                                  
                 if laDIFFROW[yy,1]=='VL_JUROS'                                         
                    if lcSALDO_ZERO == 'N'
                       if laALTER[ii,db_fetchncol(laALTER,'ACAO')] =='-'
                          aadd(laSAVE_AUX,(laDIFFROW[yy,2] - laDIFFROW[yy,3]))
                         else 
                          aadd(laSAVE_AUX,(laDIFFROW[yy,2] + laDIFFROW[yy,3]))
                       endif                       
                      else 
                       aadd(laSAVE_AUX,laDIFFROW[yy,3])
                    endif                                        
                 endif                                                                  
                                                                                        
                 if laDIFFROW[yy,1]=='DT_RISCO'                                         
                    aadd(laSAVE_AUX,laDIFFROW[yy,3])                                                 
                 endif                                                                  
                 if laDIFFROW[yy,1]=='FL_CALCULO'                                       
                    aadd(laSAVE_AUX,laDIFFROW[yy,3])                                            
                 endif                                                                  

                 if laDIFFROW[yy,1]=='PC_RISCO'
                    *** não registra, deixa a impressão que não foi alterada
                    aadd(laSAVE_AUX,laDIFFROW[yy,2])
                 endif
                                
          next yy
          aadd(laCONFPED,laSAVE_AUX)

          ***wout('vai atualizar no pedido controle: '+ STR(lnNR_CONTROLE))
          ***debug2(laCONFPED,,30)

          ** grava log de alteração com a diferença
          lcWHERE:= 'NR_CONTROLE='+STR(lnNR_CONTROLE)
          if psab_logs(laCONFPED,'pasta_cpedidos',lcWHERE,WGet('NR_PASTA','C'),'Pedidos') == .f.
             error_sys(db_error())
          endif 
                    
          if lcZERA_SALDO=='' .or. lcSALDO_ZERO == 'S'
             *** grava resto como saldo  OU movimetado como saldo pois o saldo anterior era zero (pedido novo)
             lcWHERE:= 'NR_CONTROLE='+STR(lnNR_CONTROLE)
             if db_update(laCONFPED,'pasta_cpedidos',{lcWHERE}) == -1
                error_sys(db_error())
             endif
           endif                          
       endif    
                
       
       *** calcula correção e juros caso não esteja marcado para zerar saldo caso não seja digitado zero como movimento
       if lcFL_CALCULO=='S' .and. lcZERA_SALDO=='' //.and. (lnVL_CALCD <> 0 .or. lnVL_CORRD <> 0 .or. lnVL_JUROD <> 0)
          
          *** valor anterior mais o movimentado
          lnSVL_CALC := (lnVL_AACALC + lnVL_CALCD) 
          lnVL_CORRD := (lnVL_AACORR + lnVL_CORRD) 
          lnVL_JUROD := (lnVL_AAJURO + lnVL_JUROD)
          
          laRESXUP:=calcorjur(WGet('TP_PASTA','C'),WGet('NR_PASTA','C'),val(WGet('CD_INDICE','C')),ldDT_RISCO,lnSVL_CALC)
                
          lnVRC := lnSVL_CALC          

          lnVCDIFF  := round(laRESXUP[1,1],2) - round(lnVL_CORRD,2)
          lnVJDIFF  := round(laRESXUP[1,2],2) - round(lnVL_JUROD,2)
          
          if laRESXUP[1,4] == '+'
             lnVCDIFF  := lnVCDIFF * (-1) //Inversão de sinal
             lnVJDIFF  := lnVJDIFF * (-1) //Inversão de sinal                  
          endif          

          lcOCOR:= laRESXUP[1,3]
          if (lnVCDIFF<>0 .or. lnVJDIFF<>0)
              laSAVE_AUX    := {WGet('NR_PASTA','C'),;
                                str(lnNR_CONTROLE),;
                                laALTER[ii,db_fetchncol(laALTER,'PEDIDO_PROCESSO')],;
                                date(),;
                                ldDT_RISCO,;
                                0,;
                                0,;
                                lnPC_RISCO,;
                                lnVCDIFF,;
                                lnVJDIFF,;
                                lcFL_CALCULO,;
                                lcOCOR,;
                                date(),;
                                time(),;
                                gcLOGIN,;
                                'N'}

              aadd(laSAVE_COR,laSAVE_AUX)  //utilizado no _insert

              *** pega para contabilizar

              la2SAVE_AUX   := {WGet('NR_PASTA','C'),;
                                str(lnNR_CONTROLE),;
                                laALTER[ii,db_fetchncol(laALTER,'PEDIDO_PROCESSO')],;
                                date(),;
                                ldDT_RISCO,;
                                0,;
                                0,;
                                lnPC_RISCO,;
                                lnVCDIFF,;
                                lnVJDIFF,;
                                lcFL_CALCULO,;
                                lcOCOR,;
                                date(),;
                                time(),;
                                gcLOGIN,;
                                'N',;
                                laALTER[ii,db_fetchncol(laALTER,'NR_CONTROLE_SEGURO')]}


              aadd(laCFC,la2SAVE_AUX)

          endif
       endif
    endif
next ii

if len(laSAVE_DET) > 1

   *wout('laDFC')
   *debug2(laDFC,,30)

   *** contabiliza detalhes do pedido
   xcont(laDFC,WGet('NR_PASTA','C'),WGet('TP_PASTA','C'))
   ***************

   if db_insert(laSAVE_DET,'pasta_cdetal_pedidos') == -1
       error_sys(db_error())
   endif
endif

if len(laSAVE_COR) > 1
   *wout('laSAVE_COR')
   *debug2(laSAVE_COR,,30)

   *wout('laCFC')
   *debug2(laCFC,,30)

   *** contabiliza detalhes do pedido
   xcont(laCFC,WGet('NR_PASTA','C'),WGet('TP_PASTA','C'))
   ***************

   if db_insert(laSAVE_COR,'pasta_cdetal_pedidos') == -1
       error_sys(db_error())
   endif
endif

atucor(laSAVE_COR)


**debug2(laCONFPAI,,30)


*wout('vai gravar no detalhe')
*debug2(laSAVE_DET,,30)

*wout('cria correção')
*debug2(laSAVE_COR,,30)

return(nil)
*************************************
static function atucor(faSAVE_COR)
*************************************

local laFIELDS          := {} ,;
      laCONFCOR         := {} ,;
      laFCOR            := {} ,;
      laDADOS           := {} ,; 
      laATUCOR          := {} ,; 
      laAUX             := {} ,;
      laRES             := {} as array
      
local lcWHERE           :='' as string  

local xx                := 0 ,;
      yy                := 0 as int    


laFCOR     := {'NR_PASTA',;
               'NR_CONTROLE',;
               'PEDIDO_PROCESSO',;
               'DT_MOVTO_PED',;
               'DT_RISCO',;
               'VL_RISCO',;
               'VL_RISCO_CALC',;
               'PC_RISCO',;
               'VL_CORRECAO',;
               'VL_JUROS',;
               'FL_CALCULO',;
               'OCOR_PEDIDO',;
               'DT_ALTERACAO',;
               'HR_ALTERACAO',;
               'LOGIN_CADASTRO'} 
                  
for xx:=2 to len(faSAVE_COR)  

    laCONFCOR:={}
    
    laFIELDS := {'VL_CORRECAO',;
                 'VL_JUROS'}     
    
    aadd(laCONFCOR,laFIELDS)
    
    
    
    laDADOS   := {faSAVE_COR[xx,ascan(laFCOR,'VL_CORRECAO')],;
                  faSAVE_COR[xx,ascan(laFCOR,'VL_JUROS')]}    
    
    aadd(laCONFCOR,laDADOS)

    laDIFFROW := db_diffrow(laCONFCOR,'pasta_cpedidos','NR_CONTROLE='+faSAVE_COR[xx,ascan(laFCOR,'NR_CONTROLE')])

    if len(laDIFFROW)>0
    
       for yy:=1 to len(laDIFFROW)
           laATUCOR  := {}
           laAUX     := {} 
           if laDIFFROW[YY,1] == 'VL_CORRECAO'
              aadd(laAUX,laDIFFROW[YY,1])
           endif
           if laDIFFROW[YY,1] == 'VL_JUROS'
              aadd(laAUX,laDIFFROW[YY,1])
           endif  
           aadd(laATUCOR,laAUX)
           
           laAUX     := {} 
           aadd(laAUX,laDIFFROW[yy,2]+laDIFFROW[yy,3])
           aadd(laATUCOR,laAUX) 
      
      
           lcWHERE:= 'NR_CONTROLE='+faSAVE_COR[xx,ascan(laFCOR,'NR_CONTROLE')]
           if db_update(laATUCOR,'pasta_cpedidos',{lcWHERE}) == -1
              error_sys(db_error())
           endif           
           
       next yy   
    endif   

next xx             
               
return(nil)



*************************************
static function geraprevisao(laNOVOS)
*************************************

local lcFL_CALCULO      := '' ,;
      lcPEDIDO_PROCESSO := '' ,;
      lcCOMENTARIOS_PED := '' ,;
      lcNR_CONTROLE     := '' ,;
      lcFL_LOG_EST      := 'N',;
      lcLANC_ZERADO     := 'N',;
      lcOCOR_PEDIDO     := '' as string

local lnVL_RISCO        := 0.00 ,;
      lnVL_CALC         := 0.00 ,;
      lnPOSSIVEL        := 0.00 ,;
      lnPROVAVEL        := 0.00 ,;
      lnREMOTO          := 0.00 ,;
      lnVCDIFF          := 0.00 ,;
      lnVJDIFF          := 0.00 ,;
      lnPC_RISCO        := 0.00 as numeric

local ii                := 0 ,;        
      xx                := 0 ,;
      liPOS             := 0 ,;
      liNR_PEDIDO_ORIGEM:= 0 as int

local laFIELDS          := {} ,;
      laFIELDC          := {} ,;
      laSAVE            := {} ,;
      laRES             := {} ,; 
      laSAVE_DET        := {} ,;
      laRESXUP          := {} ,;
      laSEQ_OCOR        := {} ,;
      laCONTSEG1        := {} ,;
      laCONTSEG2        := {} ,;
      laCONTSEG3        := {} ,;
      laSAVE_AUX        := {} ,;
      la2SAVE_AUX       := {} as array


laFIELDS   := {'NR_PASTA',;
               'NR_CONTROLE',;
               'PEDIDO_PROCESSO',;
               'DT_MOVTO_PED',;
               'DT_RISCO',;
               'VL_RISCO',;
               'VL_RISCO_CALC',;
               'PC_RISCO',;
               'VL_CORRECAO',;
               'VL_JUROS',;
               'FL_CALCULO',;
               'COMENTARIOS_PED',;
               'OCOR_PEDIDO',;
               'DT_ALTERACAO',;
               'HR_ALTERACAO',;
               'LOGIN_CADASTRO',;
               'FL_LOG_ESTIMATIVA'}
               
aadd(laSAVE_DET,laFIELDS)


laFIELDS    := {'NR_PASTA',;
                'PEDIDO_PROCESSO',;
                'VL_RISCO',;
                'PC_RISCO',;
                'VL_RISCO_CALC',;
                'DT_RISCO',;
                'FL_CALCULO',;
                'DT_MOVTO_PED',;
                'COMENTARIOS_PED',;
                'OCOR_PEDIDO',;
                'NR_PEDIDO_ORIGEM',;
                'NR_RISCO',;
                'NR_CONTROLE_SEGURO',;
                'VL_CORRECAO',;
                'VL_JUROS',;
                'TP_EXPEDIENTE'}

laFIELDC := aclone(laSAVE_DET)
aadd(laFIELDC[1],'NR_CONTROLE_SEGURO')

for ii := 2 to len(laNOVOS)

     liNR_PEDIDO_ORIGEM := 0

     lnPOSSIVEL := 0.00
     lnPROVAVEL := 0.00
     lnREMOTO   := 0.00
     
     for xx := 0 to 3

       lnVL_RISCO  := VAL(laNOVOS[ii,db_fetchncol(laNOVOS,'VL_RISCO')])

       if laNOVOS[ii,db_fetchncol(laNOVOS,'FL_CALCULO')] == 'true'
          lcFL_CALCULO:='S'
         else
          lcFL_CALCULO:=''
       endif


       if xx ==0  //pai
          lnPC_RISCO        := 0
          lcPEDIDO_PROCESSO := laNOVOS[ii,db_fetchncol(laNOVOS,'PEDIDO_PROCESSO')]
          lnVL_RISCO        := VAL(laNOVOS[ii,db_fetchncol(laNOVOS,'VL_RISCO')])
          lnVL_CALC         := 0
          lcCOMENTARIOS_PED := laNOVOS[ii,db_fetchncol(laNOVOS,'COMENTARIOS_PED')]
        else
          lcCOMENTARIOS_PED := ''
       endif

       laSEQ_OCOR := str2array(WGet('SEQ_OCOR','C'),',')

       if xx == val(laSEQ_OCOR[4])
          lnPROVAVEL:= VAL(laNOVOS[ii,db_fetchncol(laNOVOS,'PROVAVEL')])
          lnPC_RISCO:= (100 * lnPROVAVEL) / lnVL_RISCO
          lnPC_RISCO:= round(lnPC_RISCO,0)
          lcPEDIDO_PROCESSO:='Provável'
          lnVL_RISCO       :=0
          lnVL_CALC        :=lnPROVAVEL
        endif

       if xx == val(laSEQ_OCOR[5])
          lnPOSSIVEL:= VAL(laNOVOS[ii,db_fetchncol(laNOVOS,'POSSIVEL')])           
          lnPC_RISCO:= (100 * lnPOSSIVEL) / lnVL_RISCO
          lnPC_RISCO:= round(lnPC_RISCO,0)            
          lcPEDIDO_PROCESSO:='Possível'
          lnVL_RISCO       :=0
          lnVL_CALC        :=lnPOSSIVEL
       endif

       if xx == val(laSEQ_OCOR[6])
          lnREMOTO:= VAL(laNOVOS[ii,db_fetchncol(laNOVOS,'REMOTO')])
          lnPC_RISCO:= (100 * lnREMOTO) / lnVL_RISCO
          lnPC_RISCO:= round(lnPC_RISCO,0)
          lcPEDIDO_PROCESSO:='Remota'
          lnVL_RISCO       :=0
          lnVL_CALC        :=lnREMOTO
       endif

       laSAVE := {}
       aadd(laSAVE,laFIELDS)
       
       laSAVE_AUX := {laNOVOS[ii,db_fetchncol(laNOVOS,'NR_PASTA')],;
                     lcPEDIDO_PROCESSO,;
                     lnVL_RISCO,;
                     lnPC_RISCO,;
                     lnVL_CALC,;
                     ctod(laNOVOS[ii,db_fetchncol(laNOVOS,'DT_RISCO')]),; 
                     lcFL_CALCULO,;                                     
                     ctod(laNOVOS[ii,db_fetchncol(laNOVOS,'DT_MOVTO_PED')]),;
                     lcCOMENTARIOS_PED,;
                     '',;
                     liNR_PEDIDO_ORIGEM,;
                     xx,;
                     val(laNOVOS[ii,db_fetchncol(laNOVOS,'NR_CONTROLE_SEGURO')]),;
                     0,;
                     0,;
                     laNOVOS[ii,db_fetchncol(laNOVOS,'TP_EXPEDIENTE')]}

       aadd(laSAVE,laSAVE_AUX)

       if db_insert(laSAVE,'pasta_cpedidos') == -1
          error_sys(db_error())
       endif 

       if db_select({'max(NR_CONTROLE)'},'pasta_cpedidos') == -1
	        error_sys(db_error())
    	 endif             
       laRES     := db_fetchrow()

       lcNR_CONTROLE:= str(laRES[1])

       if xx==0
          liNR_PEDIDO_ORIGEM := val(lcNR_CONTROLE)
          lcFL_LOG_EST:='S'
          lnVL_RISCO  := VAL(laNOVOS[ii,db_fetchncol(laNOVOS,'VL_RISCO')])
         else 
          lcFL_LOG_EST:='N'
          lnVL_RISCO  := 0 
       endif
       
       lnVCDIFF := 0
       lnVJDIFF := 0
       
       *** calcula correção e juros
       if lcFL_CALCULO=='S'
          laRESXUP:=calcorjur(WGet('TP_PASTA','C'),WGet('NR_PASTA','C'),WGet('CD_INDICE','N'),ctod(laNOVOS[ii,db_fetchncol(laNOVOS,'DT_RISCO')]),lnVL_CALC)

          if laRESXUP[1,1]!=0
             lnVCDIFF  := laRESXUP[1,1]
            else
             lnVCDIFF  := 0
          endif 
          
          if laRESXUP[1,2]!=0
             lnVJDIFF  := laRESXUP[1,2]
            else
             lnVJDIFF  := 0
          endif 
          
          if laRESXUP[1,4] == '+'
             lnVCDIFF  := lnVCDIFF * (-1) //Inversão de sinal
             lnVJDIFF  := lnVJDIFF * (-1) //Inversão de sinal                  
          endif

       endif      

       if lnVL_CALC==0 .and. xx!=0 
          lcLANC_ZERADO:='S'
         else 
          lcLANC_ZERADO:='N'
       endif
       
       *** so grava se algun não estiver zerado        
       if lcLANC_ZERADO=='N'

          laSAVE_AUX := {}

          laSAVE_AUX := {laNOVOS[ii,db_fetchncol(laNOVOS,'NR_PASTA')],;
                     lcNR_CONTROLE,;
                     lcPEDIDO_PROCESSO,;
                     date(),;
                     ctod(laNOVOS[ii,db_fetchncol(laNOVOS,'DT_RISCO')]),; 
                     lnVL_RISCO,;
                     lnVL_CALC,;
                     lnPC_RISCO,;
                     lnVCDIFF,;
                     lnVJDIFF,;
                     lcFL_CALCULO,;
                     lcCOMENTARIOS_PED,;
                     laNOVOS[ii,db_fetchncol(laNOVOS,'OCOR_PEDIDO')],;
                     date(),;
                     time(),;
                     gcLOGIN,;
                     lcFL_LOG_EST}
                        
          aadd(laSAVE_DET,laSAVE_AUX)  //utilizado no _insert

          la2SAVE_AUX:={}

          la2SAVE_AUX := {laNOVOS[ii,db_fetchncol(laNOVOS,'NR_PASTA')],;
                     lcNR_CONTROLE,;
                     lcPEDIDO_PROCESSO,;
                     date(),;
                     ctod(laNOVOS[ii,db_fetchncol(laNOVOS,'DT_RISCO')]),;
                     lnVL_RISCO,;
                     lnVL_CALC,;
                     lnPC_RISCO,;
                     lnVCDIFF,;
                     lnVJDIFF,;
                     lcFL_CALCULO,;
                     lcCOMENTARIOS_PED,;
                     laNOVOS[ii,db_fetchncol(laNOVOS,'OCOR_PEDIDO')],;
                     date(),;
                     time(),;
                     gcLOGIN,;
                     lcFL_LOG_EST,;
                     laNOVOS[ii,db_fetchncol(laNOVOS,'NR_CONTROLE_SEGURO')]}

          aadd(laFIELDC,la2SAVE_AUX)

       endif

     next xx

next ii

*** contabiliza detalhes do pedido
xcont(laFIELDC,WGet('NR_PASTA','C'),WGet('TP_PASTA','C'))
***************


if db_insert(laSAVE_DET,'pasta_cdetal_pedidos') == -1
   error_sys(db_error())
endif

** update pedido juros e correção
atucor(laSAVE_DET)

return (nil)

**********************************************************************************
static function pegalabel(lcTABLE,lcVARF,lcVARL,lcVARO,fcPROGRAM,faDEFAULT_FIELDS)
**********************************************************************************
*** cria array com labels da tabela escolhida e envia para variavel html
local laFIELDS := {} ,;
      laPUT    := {} ,;
      laVALIDA := {} ,;
      laOBRIGA := {} ,;
      laLABELS := {} as array
      
local ii:= 0 as int     

laFIELDS := structtable(WSet("DB_ACTIVE"),lcTABLE,1,'N')
laLABELS := structtable(WSet("DB_ACTIVE"),lcTABLE,11,'N')

aadd(laFIELDS,'NR_CONTROLE_SEGURO')
aadd(laFIELDS,'NR_SINISTRO')
aadd(laFIELDS,'TP_EXPEDIENTE')

aadd(laLABELS,lblfscreen('NR_CONTROLE_SEGURO'))
aadd(laLABELS,lblfscreen('NR_SINISTRO' ))
aadd(laLABELS,lblfscreen('TP_EXPEDIENTE' ))

WPut(lcVARF,array2str(laFIELDS,','))
WPut(lcVARL,array2str(laLABELS,','))

laPUT := wmd_reqfield(fcPROGRAM)
if len(laPUT) > 0
   if ! empty(alltrim(laPUT[2]))
      laVALIDA := str2array(laPUT[2],',')
   endif
endif

if valtype(faDEFAULT_FIELDS) == 'A'
   if len(faDEFAULT_FIELDS) > 0
      for ii := 1 to len(faDEFAULT_FIELDS)
         if ascan(laVALIDA,faDEFAULT_FIELDS[ii]) == 0
            aadd(laVALIDA,faDEFAULT_FIELDS[ii])
         endif
      next ii
   endif
endif 

for ii := 1 to len(laFIELDS)
    if ascan(laVALIDA,laFIELDS[ii]) == 0
       aadd(laOBRIGA,'N')
    else
       aadd(laOBRIGA,'S')
    endif   
next ii

WPut(lcVARO,array2str(laOBRIGA,','))


return

*****************************************************
static function carregapedidos(lcNR_PASTA,lcTP_PASTA)
*****************************************************
local laRES1       := {} ,;
      laTESTI      := {} ,;
      laLINHA_ATUAL:= {} as array

local lnVTRC := 0.00 ,; //Total VL_RISCO_CALC
      lnVTR  := 0.00 ,; //Total VL_RISCO
      lnVTPO := 0.00 ,; //Total POSSIVE
      lnVTPR := 0.00 ,; //Total PROVAVE
      lnVTRE := 0.00 ,; //Total REMOTO
      lnVTATU:= 0.00 ,;  
      lnVJSUC:= 0.00 ,;
      lnVTTU := 0.00 ,;
      lnVA   := 0.00 as numeric

local ii     := 0 as int

local CO_POSSIVEL := 0  as int
local CO_PROVAVEL := 0  as int
local CO_REMOTO   := 0  as int

local llENCERRADA:= .f. as logical

local lcNR_ROW     := '' as string
local lcNR_CONTROLE:= '' as string

if db_select({'distinct(pasta_cpedidos.NR_CONTROLE)',;
              'pasta_cpedidos.PEDIDO_PROCESSO',;
              'pasta_cpedidos.NR_CONTROLE_SEGURO',;
              'pasta_seguro.NR_SINISTRO',;
              'pasta_cpedidos.VL_RISCO',;
              'pasta_cpedidos.PC_RISCO',;
              'exito_riscoperda.RISCOPERDA',;
              'pasta_cpedidos.DT_MOVTO_PED',;
              'pasta_cpedidos.DT_RISCO',;
              'pasta_cpedidos.VL_RISCO_CALC',;
              'pasta_cpedidos.VL_CORRECAO',;
              'pasta_cpedidos.VL_JUROS',;
              'pasta_cpedidos.FL_CALCULO',;
              'pasta_cpedidos.OCOR_PEDIDO',;
              'pasta_cpedidos.COMENTARIOS_PED',;
              'pasta_cpedidos.TP_EXPEDIENTE',;
              'pasta_cpedidos.FLAG'},;
              'pasta_cpedidos',;
              {{2,'exito_riscoperda','exito_riscoperda.PC_RISCO=pasta_cpedidos.PC_RISCO'},;
               {2,'pasta_seguro','pasta_seguro.NR_CONTROLE=pasta_cpedidos.NR_CONTROLE_SEGURO'},;
               {2,'pasta_objeto','pasta_objeto.OBJETO=pasta_cpedidos.PEDIDO_PROCESSO'}},;
              {'pasta_cpedidos.NR_PASTA='+lcNR_PASTA+ ' and (pasta_cpedidos.NR_PEDIDO_ORIGEM is null or pasta_cpedidos.NR_PEDIDO_ORIGEM = 0 )'},;
              {'pasta_cpedidos.NR_CONTROLE'}) == -1
   error_sys(db_error())
endif
laRES1 := db_fetchall()

if len(laRES1) > 1

   aadd(laRES1[1],'VAR_NR_CONTROLE')
   aadd(laRES1[1],'VAR_PEDIDO_PROCESSO')
   aadd(laRES1[1],'VAR_NR_CONTROLE_SEGURO')
   aadd(laRES1[1],'VAR_NR_SINISTRO')
   aadd(laRES1[1],'VAR_VL_RISCO')
   aadd(laRES1[1],'VAR_PC_RISCO')
   aadd(laRES1[1],'VAR_PC_RISCO_RISCOPERDA')
   aadd(laRES1[1],'VAR_DT_RISCO')
   aadd(laRES1[1],'VAR_VL_RISCO_CALC')
   aadd(laRES1[1],'VAR_VL_CORRECAO')
   aadd(laRES1[1],'VAR_VL_JUROS')
   aadd(laRES1[1],'VAR_VL_ATUALIZADO')
   aadd(laRES1[1],'VAR_FL_CALCULO')
   aadd(laRES1[1],'VAR_DT_MOVTO_PED')
   aadd(laRES1[1],'VAR_COMENTARIOS_PED')
   aadd(laRES1[1],'VAR_OCOR_PEDIDO')
   aadd(laRES1[1],'VAR_TP_EXPEDIENTE')
   aadd(laRES1[1],'VAR_FLAG')
   aadd(laRES1[1],'VAR_LNK')
   aadd(laRES1[1],'VAR_TBL')
   aadd(laRES1[1],'VAR_CHK')
   aadd(laRES1[1],'VAR_VL_POSSIVEL')
   aadd(laRES1[1],'VAR_VL_PROVAVEL')
   aadd(laRES1[1],'VAR_VL_REMOTO')  
   aadd(laRES1[1],'VAR_VL_ATU')  

   lnVTR   := 0.00 //Total VL_RISCO
   lnVTPO  := 0.00 //Total POSSIVEL
   lnVTPR  := 0.00 //Total PROVAVEL
   lnVTRE  := 0.00 //Total REMOTO    
   lnVTATU := 0.00 //Total ATU
   lnVTTU  := 0.00 

   for ii := 2 to len(laRES1)
      lcNR_ROW := alltrim(str(ii))

      aadd(laRES1[ii],'VAR_NR_CONTROLE_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_PEDIDO_PROCESSO_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_NR_CONTROLE_SEGURO_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_NR_SINISTRO_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_VL_RISCO_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_PC_RISCO_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_PC_RISCO_'+lcNR_ROW+'_RISCOPERDA')
      aadd(laRES1[ii],'VAR_DT_RISCO_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_VL_RISCO_CALC_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_VL_CORRECAO_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_VL_JUROS_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_VL_ATUALIZADO_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_FL_CALCULO_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_DT_MOVTO_PED_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_COMENTARIOS_PED_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_OCOR_PEDIDO_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_TP_EXPEDIENTE_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_FLAG_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_LNK_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_TBL_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_CHK_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_VL_POSSIVEL_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_VL_PROVAVEL_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_VL_REMOTO_'+lcNR_ROW)
      aadd(laRES1[ii],'VAR_VL_ATU_'+lcNR_ROW)


      WPut('VAR_NR_CONTROLE_'+lcNR_ROW,            laRES1[ii,db_fetchncol(laRES1,'NR_CONTROLE')])
      WPut('VAR_PEDIDO_PROCESSO_'+lcNR_ROW,        laRES1[ii,db_fetchncol(laRES1,'PEDIDO_PROCESSO')])
      WPut('VAR_NR_CONTROLE_SEGURO_'+lcNR_ROW,     laRES1[ii,db_fetchncol(laRES1,'NR_CONTROLE_SEGURO')])
      WPut('VAR_NR_SINISTRO_'+lcNR_ROW,            laRES1[ii,db_fetchncol(laRES1,'NR_SINISTRO')])
      WPut('VAR_VL_RISCO_'+lcNR_ROW,               wpictrans('VL_RISCO',laRES1[ii,db_fetchncol(laRES1,'VL_RISCO')]))      
      WPut('VAR_PC_RISCO_'+lcNR_ROW,               laRES1[ii,db_fetchncol(laRES1,'PC_RISCO')])
      WPut('VAR_DT_RISCO_'+lcNR_ROW,               laRES1[ii,db_fetchncol(laRES1,'DT_RISCO')])
      WPut('VAR_VL_RISCO_CALC_'+lcNR_ROW,          wpictrans('VL_RISCO_CALC',laRES1[ii,db_fetchncol(laRES1,'VL_RISCO_CALC')]))
      WPut('VAR_VL_CORRECAO_'+lcNR_ROW,            wpictrans('VL_CORRECAO',laRES1[ii,db_fetchncol(laRES1,'VL_CORRECAO')]))
      WPut('VAR_VL_JUROS_'+lcNR_ROW,               wpictrans('VL_JUROS',laRES1[ii,db_fetchncol(laRES1,'VL_JUROS')]))
      WPut('VAR_DT_MOVTO_PED_'+lcNR_ROW,           laRES1[ii,db_fetchncol(laRES1,'DT_MOVTO_PED')])
      WPut('VAR_COMENTARIOS_PED_'+lcNR_ROW,        laRES1[ii,db_fetchncol(laRES1,'COMENTARIOS_PED')])
      WPut('VAR_OCOR_PEDIDO_'+lcNR_ROW,            laRES1[ii,db_fetchncol(laRES1,'OCOR_PEDIDO')])
      WPut('VAR_TP_EXPEDIENTE_'+lcNR_ROW,          laRES1[ii,db_fetchncol(laRES1,'TP_EXPEDIENTE')])
      WPut('VAR_FLAG_'+lcNR_ROW,                   laRES1[ii,db_fetchncol(laRES1,'FLAG')])


      lcNR_CONTROLE=str(laRES1[ii,db_fetchncol(laRES1,'NR_CONTROLE')])

      laTESTI=CarregaEstimativa(lcNR_PASTA,lcTP_PASTA,lcNR_CONTROLE) 
      
      *** se achou estimativa
      if len(laTESTI)<>0

         CO_POSSIVEL:=0
         CO_PROVAVEL:=0
         CO_REMOTO  :=0

         *** identifica qual coluna e de qual probabilidade
         if laTESTI[1,1]=='Possível'
            CO_POSSIVEL:=1
         elseif laTESTI[1,2]=='Possível'
            CO_POSSIVEL:=2
         elseif laTESTI[1,3]=='Possível'
            CO_POSSIVEL:=3
         endif

         if laTESTI[1,1]=='Provável'
            CO_PROVAVEL:=1
         elseif laTESTI[1,2]=='Provável'
            CO_PROVAVEL:=2
         elseif laTESTI[1,3]=='Provável'
            CO_PROVAVEL:=3
         endif

         if laTESTI[1,1]=='Remota'
            CO_REMOTO:=1
         elseif laTESTI[1,2]=='Remota'
            CO_REMOTO:=2
         elseif laTESTI[1,3]=='Remota'
            CO_REMOTO:=3
         endif

         WPut('VAR_VL_POSSIVEL_'+lcNR_ROW,            wpictrans('VL_RISCO',laTESTI[2,CO_POSSIVEL]))
         WPut('VAR_VL_PROVAVEL_'+lcNR_ROW,            wpictrans('VL_RISCO',laTESTI[2,CO_PROVAVEL]))
         WPut('VAR_VL_REMOTO_'+lcNR_ROW,              wpictrans('VL_RISCO',laTESTI[2,CO_REMOTO]))

         lnVTR  := lnVTR  + laRES1[ii,db_fetchncol(laRES1,'VL_RISCO')]       
         lnVTPO := lnVTPO + laTESTI[2,CO_POSSIVEL]
         lnVTPR := lnVTPR + laTESTI[2,CO_PROVAVEL]
         lnVTRE := lnVTRE + laTESTI[2,CO_REMOTO]
      
         lnVTATU:= laTESTI[2,1] +  laTESTI[2,2] + laTESTI[2,3] 
         lnVTTU:= lnVTTU + (laTESTI[2,1] +  laTESTI[2,2] + laTESTI[2,3]) 
             
         WPut('VAR_VL_ATU_'+lcNR_ROW,              wpictrans('VL_RISCO',lnVTATU))
      endif
      
   next ii  

   WPut('lstPEDIDOS',laRES1)
   
   WPut('VAR_E_VL_RISCO',wpictrans('VL_RISCO',lnVTR))
   WPut('VAR_E_VL_POSSIVEL',wpictrans('VL_RISCO',lnVTPO))
   WPut('VAR_E_VL_PROVAVEL',wpictrans('VL_RISCO',lnVTPR))
   WPut('VAR_E_VL_REMOTO',wpictrans('VL_RISCO',lnVTRE)) 
   WPut('VAR_E_VL_ATU',wpictrans('VL_RISCO',lnVTTU))  



endif

return
* Function  : valores_padroes(fcNR_PASTA,fcTP_PASTA)
* Objetivo  : Alimentar os campos DT_MOVTO_PED, DT_RISCO, OCOR_PEDIDO com valores padrões
* Parâmetros:
*             fcNR_PASTA : Numero da Pasta
*             fcTP_PASTA : Tipo da Pasta
*
* Autor     : Valdimari Martins - 09/02/2009

static function valores_padroes(fcNR_PASTA, fcTP_PASTA)
   local laRESULT      := {},;
         laRESULT_OCOR := {} as array

   local lcLINHA       := "" as string

   if db_select({'DT_RISCO_CONF','OCOR_PEDIDO_INICIO','FL_RISCO_CEM','OCOR_PEDIDO_CORRECAO','OCOR_PEDIDO_RATEIO','NS_PROV','NS_POSS','NS_REMO'},'pasta_config',,{'TP_PASTA = '+DLAP+fcTP_PASTA+DLAP}) == -1
      error_sys(db_error())
   endif
   laRESULT_OCOR:=db_fetchrow()

   if (empty(laRESULT_OCOR[2]) .OR. laRESULT_OCOR[2]='') .OR. (empty(laRESULT_OCOR[4]) .OR. laRESULT_OCOR[4]='') .OR. (empty(laRESULT_OCOR[5]) .OR. laRESULT_OCOR[5]='') .OR. (empty(laRESULT_OCOR[6]) .OR. laRESULT_OCOR[6]='') .OR. (empty(laRESULT_OCOR[7]) .OR. laRESULT_OCOR[7]='') .OR. (empty(laRESULT_OCOR[8]) .OR. laRESULT_OCOR[8]='')
      walert('A parametrização dos Pedidos para esta Pasta \n ainda não foi realizada')
      return(.f.)
   else
      if len(laRESULT_OCOR) > 0
         if !empty(laRESULT_OCOR[1])
            if db_select({laRESULT_OCOR[1]},'pasta',,{'NR_PASTA = '+fcNR_PASTA}) == -1
               error_sys(db_error())
            endif
            laRESULT:=db_fetchrow()
            if len(laRESULT) > 0
               WPut('VAR_DT_MOVTO_PED_1',date())
               WPut('VAR_DT_RISCO_1',laRESULT[1])
               WPut('OCOR_INIC',laRESULT_OCOR[2])
               WPut('VAR_FL_RISCO_CEM',laRESULT_OCOR[3])
               WPut('OCOR_CALC',laRESULT_OCOR[4])
               WPut('OCOR_ESTO',laRESULT_OCOR[5])

               lcLINHA:=DLAP+'Provável'+DLAP
               lcLINHA+=','+DLAP+'Possível'+DLAP
               lcLINHA+=','+DLAP+'Remoto'+DLAP
               lcLINHA+=','+laRESULT_OCOR[6]
               lcLINHA+=','+laRESULT_OCOR[7]
               lcLINHA+=','+laRESULT_OCOR[8]

               WPut('SEQ_OCOR',lcLINHA)
            else
               walert('A parametrização dos Pedidos para esta Pasta \n ainda não foi realizada')
            endif
         else
            WPut('VAR_DT_MOVTO_PED_1',date())
            WPut('VAR_DT_RISCO_1','')
            WPut('OCOR_INIC',laRESULT_OCOR[2])

            WPut('VAR_FL_RISCO_CEM',laRESULT_OCOR[3])
            WPut('OCOR_CALC',laRESULT_OCOR[4])
            WPut('OCOR_ESTO',laRESULT_OCOR[5])

            lcLINHA:=DLAP+'Provável'+DLAP
            lcLINHA+=','+DLAP+'Possível'+DLAP
            lcLINHA+=','+DLAP+'Remoto'+DLAP
            lcLINHA+=','+laRESULT_OCOR[6]
            lcLINHA+=','+laRESULT_OCOR[7]
            lcLINHA+=','+laRESULT_OCOR[8]

            WPut('SEQ_OCOR',lcLINHA)

         endif
      else
         walert('A parametrização dos Pedidos para esta Pasta \n ainda não foi realizada')
      endif
   endif
return(nil)

***********************************************************************
static Function CarregaEstimativa(pcNR_PASTA, pcTp_Pasta,pcNR_CONTROLE)
***********************************************************************
local laRES       := {} as array

local laRES2      := {} as array
local laTIT       := {} as array
local laTITAUX    := {} as array

local laVAL       := {} as array
local laVALAUX    := {} as array

local ii          := 0 as int

if db_select({'pasta_cpedidos.NR_CONTROLE',;
              'pasta_cpedidos.PEDIDO_PROCESSO',;
              'pasta_cpedidos.VL_RISCO_CALC + pasta_cpedidos.VL_CORRECAO + pasta_cpedidos.VL_JUROS as VL_ATUALIZADO'},;
              'pasta_cpedidos',,;
              {'(pasta_cpedidos.NR_PEDIDO_ORIGEM = ' +pcNR_CONTROLE+')'},;
              {'pasta_cpedidos.NR_CONTROLE'}) == -1
   error_sys(db_error())
endif
laRES := db_fetchall()

for ii := 2 to len(laRES)
    aadd(laTITAUX,laRES[ii,2])
    aadd(laVALAUX,laRES[ii,3])
next ii
aadd(laTIT,laTITAUX)
aadd(laTIT,laVALAUX)

return(laTIT)

**********************************************************************************
static Function calcorjur(fcTP_PASTA,fcNR_PASTA,fnCD_INDICE,fdDT_RISCO,fnVL_RISCO)
**********************************************************************************
*** Calculo da correção e Juros

local laMARKUP  := {} as array
local laJUROS   := {} as array
local laRESULT  := {} as array
local laRES     := {} as array
local laRETURN  := {} as array

local lnVC      := 0.00 as numeric
local lnVJ      := 0.00 as numeric

local lcFL_OPERADOR := '' as string

local ldJUROS

laMARKUP  := getmarkup(fnCD_INDICE,date2ym(date()),date2ym(fdDT_RISCO))

** rufino 11/06/2015 09:01:15
**laMARKJUR := getvlmarkup(fcNR_PASTA,fcTP_PASTA,'VL_RISCO')

*** procura data utilizada para calculo do juros
if db_select({'WFIELD_DATABASE_JUROS'},'pasta_config',,;
            {'TP_PASTA='+DLAP+fcTP_PASTA+DLAP}) == -1
   error_sys(db_error())
endif
laRESULT := db_fetchrow()

if laRESULT[1] == ''
   ldJUROS:=date()
else
   if upper(laRESULT[1]) == "DT_RISCO"
      ldJUROS:=fdDT_RISCO
   else

      if db_select({laRESULT[1]},'pasta',,;
                  {'NR_PASTA='+fcNR_PASTA}) == -1
         error_sys(db_error())
      endif
      laRES:= db_fetchrow()

      if laRES[1] == ctod('  /  /    ')
         ldJUROS:=date()
      else
         ldJUROS:=laRES[1]
      endif
   endif
endif


laJUROS := getmarkup_juros(fnCD_INDICE,date2ym(date()),date2ym(ldJUROS))

if laMARKUP[1] != 0
   lnVC  := round(fnVL_RISCO * (laMARKUP[1]-1),2)
  else 
   lnVC  := 0 
endif   

** rufino 11/06/2015 09:01:15
*if laMARKJUR[1] != 0
*   lnVJ  := round((fnVL_RISCO+lnVC) * (laMARKJUR[2]-1),2)
*  else
*   lnVJ  := 0
*endif

if laJUROS[1] != 0
   lnVJ  := round((fnVL_RISCO+lnVC) * (laJUROS[1]-1),2)
  else
   lnVJ  := 0
endif



** transacao_contabil_correcao_estorno.FL_OPERADOR
** transacao_contabil_juro_estorno.FL_OPERADOR
** lcFL_OPERADOR = FL_OPERADOR

lcFL_OPERADOR := '-'

aadd(laRETURN,{lnVC,lnVJ,WGet('OCOR_CALC','C'),lcFL_OPERADOR})

return(laRETURN)

******************************************************************************
Static Function EstiRecalcula(fcTP_PASTA,fcNR_PASTA,fnCD_INDICE,fnNR_CONTROLE)
******************************************************************************
* Objetivo  : Recalcula todas as estimativas geradas de uma determinada pasta com base em um determinado índice.
*** indice alterado recalcula todas as provisoes
local laPEDIDOS     := {},;
      laOCORRECIA   := {},;
      laRES         := {},;
      laESTIMATIVAS := {},;
      laFIELDS      := {},;
      laSAVE_COR    := {},;
      laRESXUP      := {},;
      laSAVE_AUX    := {},;
      laRESULT      := {} as array

local lcOCOR        :='' as string

local ldDT_RISCO as date

local lnVL_CALC     := 0.00,;
      lnVRC         := 0.00,;
      lnVL_CORR     := 0.00,;
      lnVL_JURO     := 0.00,;
      lnVCDIFF      := 0.00,;
      lnVJDIFF      := 0.00 as numeric

local xx := 0 as int


laPEDIDOS := {'pasta_cpedidos.NR_PASTA',;
              'pasta_cpedidos.NR_CONTROLE',;
              'pasta.TP_PASTA'}

laESTIMATIVAS := {'NR_CONTROLE',;
                  'PEDIDO_PROCESSO',;
                  'VL_RISCO',;
                  'PC_RISCO',;
                  'DT_RISCO',;
                  'VL_RISCO_CALC',;
                  'VL_CORRECAO',;
                  'VL_JUROS',;
                  'FL_CALCULO',;
                  'DT_MOVTO_PED',;
                  'COMENTARIOS_PED',;
                  'OCOR_PEDIDO',;
                  'NR_PEDIDO_ORIGEM'}

laFIELDS   := {'NR_PASTA',;
               'NR_CONTROLE',;
               'PEDIDO_PROCESSO',;
               'DT_MOVTO_PED',;
               'DT_RISCO',;
               'VL_RISCO',;
               'VL_RISCO_CALC',;
               'PC_RISCO',;
               'VL_CORRECAO',;
               'VL_JUROS',;
               'FL_CALCULO',;
               'OCOR_PEDIDO',;
               'DT_ALTERACAO',;
               'HR_ALTERACAO',;
               'LOGIN_CADASTRO'}

aadd(laSAVE_COR,laFIELDS)

*** pega os pedidos pai (cabeça)
if db_select(laPedidos,'pasta_cpedidos',;
             {{2,'pasta','(pasta.NR_PASTA = pasta_cpedidos.NR_PASTA)'}},;
              {'pasta_cpedidos.NR_PASTA='+fcNR_PASTA+ ' and (pasta_cpedidos.NR_PEDIDO_ORIGEM is null or pasta_cpedidos.NR_PEDIDO_ORIGEM = 0 )'}) == -1
   error_sys(db_error())
endif
laRESULT := db_fetchall()

if len(laRESULT)>1

   for xx := 2 to len(laRESULT)
       if db_select(laESTIMATIVAS,'pasta_cpedidos',,;
                    {'pasta_cpedidos.NR_PASTA='+fcNR_PASTA+ ' and (pasta_cpedidos.NR_PEDIDO_ORIGEM = ' + str(laRESULT[xx,db_fetchncol(laRESULT,'NR_CONTROLE')])+' and FL_CALCULO = ' + DLAP + 'S' + DLAP + ') and pasta_cpedidos.VL_RISCO_CALC<>0'}) == -1
          error_sys(db_error())
       endif
       laRES := db_fetchall()

       for ww := 2 to len(laRES)
           if laRES[ww,db_fetchncol(laRES,'FL_CALCULO')] =='S'  
                      
              ldDT_RISCO:=laRES[ww,db_fetchncol(laRES,'DT_RISCO')]
              lnVL_CALC :=laRES[ww,db_fetchncol(laRES,'VL_RISCO_CALC')]
              lnVL_CORR :=laRES[ww,db_fetchncol(laRES,'VL_CORRECAO')]
              lnVL_JURO :=laRES[ww,db_fetchncol(laRES,'VL_JUROS')]
              
              laRESXUP:=calcorjur(WGet('TP_PASTA','C'),WGet('NR_PASTA','C'),fnCD_INDICE,ldDT_RISCO,lnVL_CALC)
              
              lnVRC := lnVL_CALC
             
              lnVCDIFF  := laRESXUP[1,1] - round(lnVL_CORR,2)
              lnVJDIFF  := laRESXUP[1,2] - round(lnVL_JURO,2) 
              
              if laRESXUP[1,4] == '+'
                 lnVCDIFF  := lnVCDIFF * (-1) //Inversão de sinal
                 lnVJDIFF  := lnVJDIFF * (-1) //Inversão de sinal                  
              endif            
              
              lcOCOR:= laRESXUP[1,3]
              
              if (lnVCDIFF<>0 .or. lnVJDIFF<>0)
                  laSAVE_AUX    := {fcNR_PASTA,;
                                    str(laRES[ww,db_fetchncol(laRES,'NR_CONTROLE')]),;
                                    laRES[ww,db_fetchncol(laRES,'PEDIDO_PROCESSO')],;
                                    date(),;
                                    ldDT_RISCO,;
                                    0,;
                                    0,;
                                    laRES[ww,db_fetchncol(laRES,'PC_RISCO')],;
                                    lnVCDIFF,;
                                    lnVJDIFF,;
                                    laRES[ww,db_fetchncol(laRES,'FL_CALCULO')],;
                                    lcOCOR,;
                                    date(),;
                                    time(),;
                                    gcLOGIN}
              
                  aadd(laSAVE_COR,laSAVE_AUX)  //utilizado no _insert
              endif
           endif
       next ww
   next xx    
endif         
              
if len(laSAVE_COR) > 1
   if db_insert(laSAVE_COR,'pasta_cdetal_pedidos') == -1
       error_sys(db_error())
   endif      
endif 
            
** update pedido
atucor(laSAVE_COR)  
              
return(nil)

********************************
static function carrega_indice()
********************************

local lcWHERE:=''
local laRES:={}
local laLST_NOVA:={}
local laVINCULADO:={}

local paAUTO     :={} as array



local  laOPT    := {} ,;
       laOPTV   := {} ,;
       laPUT    := {} ,;
       laDEF    := {} ,;
       laDEFV   := {} ,;
       laATI    := {} ,;
       laATIV   := {} ,;
       laINA    := {} ,;
       laINAV   := {} ,;
       laPUTV   := {} ,;
       laFIELD  := {} as array


local  jj    := 1  ,;
       liPOS := 0  as int


laDEF := {}
laDEFV:= {}

laATI := {}
laATIV:= {}

laINA := {}
laINAV:= {}

laPUT := {}
laPUTV:= {}

laFIELD := structtable(WSet("DB_ACTIVE"),'indice_reajuste',1,'A')
liPOS   := ascan(laFIELD,'FL_ATIVO')

if liPOS<>0
   laFIELD:={'CD_INDICE','NM_INDICE','FL_ATIVO'}
  else
   laFIELD:={'CD_INDICE','NM_INDICE'}
 endif

if db_select(laFIELD,'indice_reajuste',,,{'CD_INDICE'}) == -1
   error_sys(db_error())
endif
laRES := db_fetchall()

for jj := 2 to len(laRES)
    if liPOS<>0
       if laRES[jj,3] == 'D'
          aadd(laDEF,laRES[jj,2])
          aadd(laDEFV,laRES[jj,1])

        elseif laRES[jj,3] == 'I'
          aadd(laINA,laRES[jj,2])
          aadd(laINAV,laRES[jj,1])

        else
          aadd(laATI,laRES[jj,2])
          aadd(laATIV,laRES[jj,1])
       endif
    else
       aadd(laATI,laRES[jj,2])
       aadd(laATIV,laRES[jj,1])
    endif
next jj

if len(laDEF) == 0
   aadd(laDEF,'') // Adiciona uma linha vazia no inicio do combo, caso seja solicitado
   aadd(laDEFV,'')
endif

for jj=1 to len(laDEF)
    aadd(laPUT,laDEF[jj])
    aadd(laPUTV,laDEFV[jj])
next jj

for jj=1 to len(laATI)
    aadd(laPUT,laATI[jj])
    aadd(laPUTV,laATIV[jj])
next jj

for jj=1 to len(laINA)
    aadd(laPUT,'INATIVO - '+laINA[jj])
    aadd(laPUTV,laINAV[jj])
next jj


WPut('NM_INDICE.option',laPUT)
WPut('NM_INDICE.optionvalue',laPUTV)

return(nil)

********************************
static function carrega_moeda()
********************************

local lcWHERE:=''
local laRES:={}
local laLST_NOVA:={}
local laVINCULADO:={}

local paAUTO     :={} as array



local  laOPT    := {} ,;
       laOPTV   := {} ,;
       laPUT    := {} ,;
       laDEF    := {} ,;
       laDEFV   := {} ,;
       laATI    := {} ,;
       laATIV   := {} ,;
       laINA    := {} ,;
       laINAV   := {} ,;
       laPUTV   := {} ,;
       laFIELD  := {} as array


local  jj    := 1  ,;
       liPOS := 0  as int


laDEF := {}
laDEFV:= {}

laATI := {}
laATIV:= {}

laINA := {}
laINAV:= {}

laPUT := {}
laPUTV:= {}

laFIELD := structtable(WSet("DB_ACTIVE"),'moeda',1,'A')
liPOS   := ascan(laFIELD,'FL_ATIVO')

if liPOS<>0
   laFIELD:={'CD_MOEDA','NM_MOEDA','FL_ATIVO'}
  else
   laFIELD:={'CD_MOEDA','NM_MOEDA'}
 endif

if db_select(laFIELD,'moeda',,,{'CD_MOEDA'}) == -1
   error_sys(db_error())
endif
laRES := db_fetchall()

for jj := 2 to len(laRES)
    if liPOS<>0
       if laRES[jj,3] == 'D'
          aadd(laDEF,laRES[jj,2])
          aadd(laDEFV,laRES[jj,1])

        elseif laRES[jj,3] == 'I'
          aadd(laINA,laRES[jj,2])
          aadd(laINAV,laRES[jj,1])

        else
          aadd(laATI,laRES[jj,2])
          aadd(laATIV,laRES[jj,1])
       endif
    else
       aadd(laATI,laRES[jj,2])
       aadd(laATIV,laRES[jj,1])
    endif
next jj

if len(laDEF) == 0
   aadd(laDEF,'') // Adiciona uma linha vazia no inicio do combo, caso seja solicitado
   aadd(laDEFV,'')
endif

for jj=1 to len(laDEF)
    aadd(laPUT,laDEF[jj])
    aadd(laPUTV,laDEFV[jj])
next jj

for jj=1 to len(laATI)
    aadd(laPUT,laATI[jj])
    aadd(laPUTV,laATIV[jj])
next jj

for jj=1 to len(laINA)
    aadd(laPUT,'INATIVO - '+laINA[jj])
    aadd(laPUTV,laINAV[jj])
next jj


WPut('NM_MOEDA.option',laPUT)
WPut('NM_MOEDA.optionvalue',laPUTV)

return(nil)

*************************************
static function carregaseg()
*************************************
local lcTABLEDET := '' ,;
      lcWHEREDET := '' ,;
      lcOBJ      := '' as string

local laRESULT := {} as array

local ii := 0 as int

lcTABLEDET      := 'pasta_seguro'
lcWHEREDET      := 'NR_PASTA = '+DLAP+WGet('NR_PASTA','C')+DLAP

if db_select({'NR_SINISTRO','NR_CONTROLE'},;
              lcTABLEDET,,;
              {lcWHEREDET},{'NR_CONTROLE'}) == -1
   error_sys(db_error())
endif
laRESULT := db_fetchall()

lcOBJ:=''
for ii := 2 to len(laRESULT)
    if lcOBJ==''
       lcOBJ:=laRESULT[ii,1]+','+alltrim(str(laRESULT[ii,2]))
      else
       lcOBJ:=lcOBJ+'|'+laRESULT[ii,1]+','+alltrim(str(laRESULT[ii,2]))
    endif
next ii
WPut('LISTA_SEG',lcOBJ)

return(nil)
***************************************************
Static function xcont(faSAVE,fcNR_PASTA,fcTP_PASTA)
***************************************************
   local lcNR_CONTROLE     := '' ,;
         lcPEDIDO_PROCESSO := '' ,;
         lcAUX             := '' ,;
         lcHISTORICO       := '' ,;
         lcCT_CREDITO      := '' ,;
         lcCT_DEBITO       := '' ,;
         lcCD_TRCT         := '' ,;
         lcFL_OPERADOR     := '' as string

   local ii           := 0 ,;
         lnPOS        := 0 ,;
         lnLINHA      := 0 ,;
         lnPOS2       := 0 as int

   local lnDIFF     := 0 as numeric

   local laPEDIDOS     := {} ,;
         laOBJETO      := {} ,;
         laTRCT        := {} ,;
         laEXCONT      := {} ,;
         laPARSER      := {} ,;
         laSAVE        := {} ,;
         la2SAVE_AUX   := {} ,;
         laCONT        := {} as array

   //Montando where de objetos

   for ii := 2 to len(faSAVE)

     *** Rufino esse trecho força o pedido_processo sempre ser o pai
     if ii == 2
        lcPEDIDO_PROCESSO := faSAVE[ii,db_fetchncol(faSAVE,'PEDIDO_PROCESSO')]
     endif
     ****


      if ii > 2
         lcAUX += ','
      endif

      lcAUX += DLAP
      lcAUX += faSAVE[ii,db_fetchncol(faSAVE,'PEDIDO_PROCESSO')]
      lcAUX += DLAP
   next ii



   if db_select({'OBJETO',;
                 'CD_TRCT',;
                 'CD_TRCT_ESTORNO',;
                 'CD_TRCT_CORRECAO',;
                 'CD_TRCT_CORRECAO_ESTORNO',;
                 'CD_TRCT_JURO',;
                 'CD_TRCT_JURO_ESTORNO'},;
                 'pasta_objeto',,;
                 {'TP_PASTA='+DLAP+fcTP_PASTA+DLAP,'OBJETO in('+lcAUX+')'}) == -1
      error_sys(db_error())
   endif
   laOBJETO := db_fetchall()


   *debug2(lcAUX,,300)
   *debug2(laOBJETO)

   *** lcAUX = 'FGTS,POSSIVEL,PROVAVEL,REMOTO,acordo,POSSIVEL,PROVAVEL,REMOTO,ASA,POSSIVEL,PROVAVEL,REMOTO,...'
   *** acima so vai achar o objeto igual ao pai porque os detalhes nao tem cadastro


   lnLINHA   := ascan(laOBJETO,{ | x | x[1] == lcPEDIDO_PROCESSO})

   *debug2(lnLINHA)

   lcCD_TRCT := alltrim(str(laOBJETO[lnLINHA,db_fetchncol(laOBJETO,'CD_TRCT')])) // procura objeto FGTS



   laSAVE      := {{'CD_PLCT_CREDITO',;
                    'CD_PLCT_DEBITO',;
                    'VL_LANCAMENTO',;
                    'HISTORICO',;
                    'DT_LANCAMENTO',;
                    'HR_LANCAMENTO',;
                    'LOGIN',;
                    'WTABLE',;
                    'WTABLE2',;
                    'WPKEY_NUM',;
                    'WPKEY_NUM2',;
                    'FL_CONTABILIZADO'}}

   *** pula segundo lançamento porque e do pai
   for ii := 3 to len(faSAVE)
      lcNR_CONTROLE     := alltrim(faSAVE[ii,db_fetchncol(faSAVE,'NR_CONTROLE')])
      if db_select({'NR_CONTROLE',;
                    'PEDIDO_PROCESSO',;
                    'VL_RISCO_CALC',;
                    'VL_CORRECAO',;
                    'VL_JUROS',;
                    'FL_CALCULO',;
                    'DT_RISCO',;
                    'PC_RISCO',;
                    'FLAG'},;
                    'pasta_cpedidos',,;
                    {'pasta_cpedidos.NR_PASTA='+fcNR_PASTA+' and pasta_cpedidos.NR_CONTROLE = '+lcNR_CONTROLE}) == -1
         error_sys(db_error())
      endif
      laPEDIDOS := db_fetchall()

      lnPOS             := ascan(laPEDIDOS,{ | y | alltrim(str(y[1]))==lcNR_CONTROLE }) //Posição do pedido nos pedidos ja gravados
      laPARSER          := {}

      *** rufino comentado abaixo para sempre pegar o que esta no cadastro do pai variavel fixado acima
      *** lcPEDIDO_PROCESSO := faSAVE[ii,db_fetchncol(faSAVE,'PEDIDO_PROCESSO')]
      ***

      laCONT            := {{'VL_RISCO_CALC','CD_TRCT'},;
                            {'VL_CORRECAO','CD_TRCT_CORRECAO'},;
                            {'VL_JUROS','CD_TRCT_JURO'}}

      aadd(laPARSER,faSAVE[1]) //fields
      aadd(laPARSER,faSAVE[ii])  //linha dados

      for xx := 1 to len(laCONT)
         la2SAVE_AUX := {}

         if lnPOS > 0 //Caso o Pedido ja exista, faz o calculo de diferença.
            lnDIFF     := round(faSAVE[ii,db_fetchncol(faSAVE,laCONT[xx,1])],2) - round(laPEDIDOS[lnPOS,db_fetchncol(laPEDIDOS,laCONT[xx,1])],2)

            *** não a diferença contabiliza o pedido
            if lnDIFF == 0
               lnDIFF  :=round(faSAVE[ii,db_fetchncol(faSAVE,laCONT[xx,1])],2)
            endif

         else
            lnDIFF     := round(faSAVE[ii,db_fetchncol(faSAVE,laCONT[xx,1])],2)
         endif

         if  lnDIFF <> 0.00
            /* Localizando as Contas Débito, Crédito e Histórico */

            lnPOS2 := ascan(laOBJETO,{ | x | x[1] == lcPEDIDO_PROCESSO})

            if lnPOS2 > 0
               if lnDIFF >= 0 //Se for Positivo
                  lcAUX  := alltrim(str(laOBJETO[lnPOS2,db_fetchncol(laOBJETO,laCONT[xx,2])])) // procura objeto FGTS
               else          //Se for Estorno
                  lcAUX  := alltrim(str(laOBJETO[lnPOS2,db_fetchncol(laOBJETO,laCONT[xx,2]+'_ESTORNO')])) // procura objeto seguido da palavra estorno FGTS_ESTORNO
               endif

               if db_select({'CD_TRCT',;
                             'CD_PLCT_DEBITO',;
                             'CD_PLCT_CREDITO',;
                             'FL_OPERADOR',;
                             'HISTORICO'},;
                             'excontped',,;
                             {'CD_TRCT='+DLAP+lcAUX+DLAP+' and DESCR_OCOR = '+DLAP+alltrim(faSAVE[2,db_fetchncol(faSAVE,'OCOR_PEDIDO')])+DLAP}) == -1

                  error_sys(db_error())
               endif
               laEXCONT := db_fetchall()

               if db_select({'CD_TRCT',;
                             'CD_PLCT_DEBITO',;
                             'CD_PLCT_CREDITO',;
                             'FL_OPERADOR',;
                             'HISTORICO'},;
                             'transacao_contabil',,;
                             {'CD_TRCT='+DLAP+lcAUX+DLAP}) == -1

                  error_sys(db_error())
               endif
               laTRCT := db_fetchall()


               *** rufino 25/06/2015 10:25:42 procura nas excessoes se não encotrar procura na transação contabil
               lnPOS2 := ascan(laEXCONT,{ | z | alltrim(str(z[1]))==lcAUX })

               if lnPOS2 > 0
                  laTRCT := aclone(laEXCONT)
               else
                  lnPOS2 := ascan(laTRCT,{ | z | alltrim(str(z[1]))==lcAUX })
               endif
               ***

               if lnPOS2 > 0
                  lcHISTORICO   := laTRCT[lnPOS2,db_fetchncol(laTRCT,'HISTORICO')]
                  lcCT_DEBITO   := laTRCT[lnPOS2,db_fetchncol(laTRCT,'CD_PLCT_DEBITO')]
                  lcCT_CREDITO  := laTRCT[lnPOS2,db_fetchncol(laTRCT,'CD_PLCT_CREDITO')]
                  lcFL_OPERADOR := laTRCT[lnPOS2,db_fetchncol(laTRCT,'FL_OPERADOR')]
               else
                  lcHISTORICO   := ''
                  lcCT_DEBITO   := ''
                  lcCT_CREDITO  := ''
                  lcFL_OPERADOR := ''
               endif

               aadd(la2SAVE_AUX,lcCT_CREDITO)     //Conta Crédito
               aadd(la2SAVE_AUX,lcCT_DEBITO)      //Conta Débito

               if lnDIFF > 0                     //Valor do Lançamento
                  aadd(la2SAVE_AUX,lnDIFF)
               else
                  if lcFL_OPERADOR == '+'
                     aadd(la2SAVE_AUX,lnDIFF * (-1)) //Inversão de sinal
                  else
                     aadd(la2SAVE_AUX,lnDIFF)
                  endif
               endif

               lcHISTORICO := strparser(lcHISTORICO,'[]',laPARSER)

               aadd(la2SAVE_AUX,lcHISTORICO)                                          // Histórico
               aadd(la2SAVE_AUX,date())                                               // Data
               aadd(la2SAVE_AUX,time())                                               // Hora
               aadd(la2SAVE_AUX,WSet('LOGIN'))                                        // Login
               aadd(la2SAVE_AUX,'pasta')                                              // Tabela Pasta
               aadd(la2SAVE_AUX,'pasta_seguro')                                       // Tabela Seguro
               aadd(la2SAVE_AUX,val(fcNR_PASTA))                                      // Chave Pasta
               aadd(la2SAVE_AUX,val(faSAVE[ii,db_fetchncol(faSAVE,'NR_CONTROLE_SEGURO')])) // Chave Seguro
               aadd(la2SAVE_AUX,'N')                                                  // Contabilizado
            endif

            if len(la2SAVE_AUX) > 0
               aadd(laSAVE,la2SAVE_AUX)
            endif

         endif

      next xx
   next ii

   ***debug2(laSAVE,,30)

   if len(laSAVE) > 1
      if db_insert(laSAVE,'mvt_contabil') == -1
         error_sys(db_error())
      endif
   endif
return (nil)




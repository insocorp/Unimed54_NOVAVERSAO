/*
Project      : gr5
Program      : mnt.cobranca.html
Function     : mnt_cobranca_html
Created on   : 14-Aug-2002   15:10:14
Descripition : Manutenção e listagem de cobranças
*/



   local lcCD_COBRANCA  := '' ,;
         lcACTION       := '' ,;
         lcTABLE        := '' ,;
         lcWHERE        := '' ,;
         lcFILTER_FIELD := '' ,;
         lcFILTER_VALUE := '' ,;
         lcORDER_FIELD  := '' ,;
         lcTP_COBRANCA  := '' as string
   /*
   local ii           := 0 ,;
         lnNR_ROWINI  := 0 ,;
         lnNR_ROWFIN  := 0 ,;
         lnNR_ROWPREV := 0 ,;
         lnNR_ROWNEXT := 0 as int
   */
   local ii := 0 as int
   local laRES         := {} ,;
         laFIELDLST    := {} ,;
         laLABELLST    := {} ,;
         laSAVE        := {} ,;
         laSAVE_AUX    := {} ,;
         laTP_COBRANCA := {} ,;
         laWHERE       := {} ,;
         laORDERBY     := {} ,;
         laLIMIT       := {} as array
   lcACTION       := upper(WGet('ACTION','C'))
   lcCD_COBRANCA  := WGet('CD_COBRANCA','C')
   if lcCD_COBRANCA = 'New'
      lcCD_COBRANCA := '0'
   endif

   /*
   lcFILTER_FIELD := WGet('FILTER_FIELD','C')
   lcFILTER_VALUE := WGet('FILTER_CONTENT','C')
   lcORDER_FIELD  := WGet('ORDER_FIELD','C')
   lnNR_ROWINI    := WGet('NR_ROWINI','N')
   lnNR_ROWFIN    := WGet('NR_ROWFIN','N')
   lnNR_ROWPREV   := WGet('NR_ROWPREV','N')
   lnNR_ROWNEXT   := WGet('NR_ROWNEXT','N')
   if lnNR_ROWPREV = 0
      lnNR_ROWPREV := 50
   endif
   if lnNR_ROWNEXT = 0
      lnNR_ROWNEXT := 50
   endif
   */

   lcTABLE       := 'cobranca'
   lcWHERE       := 'CD_COBRANCA='+lcCD_COBRANCA
   laFIELDLST    := structtable(WSet("DB_ACTIVE"),lcTABLE,1,'A')
   laLABELLST    := structtable(WSet("DB_ACTIVE"),lcTABLE,11,'A')
   laTP_COBRANCA := {'Mês',;
              'Hora',;
              'Mês / Hora',;
              'Processo',;
              'Ato processual',;
              'Avulso'}

   wPut('TITLE','Manutenção e Listagem de Cálculo de cobrança')
   wPut('TP_COBRANCA_OPT', laTP_COBRANCA)
   //wPut('FILTER_FIELD','Cód. da Cobrança')
   //wPut('ORDER_FIELD','Cobrança')

   if lcACTION !='ALTER'
      wPut('CD_COBRANCA','New')
   endif

   /*
   if empty(lcORDER_FIELD)
      lcORDER_FIELD := laLABELLST[1]
   endif
   */

   if lcACTION = 'ALTER' .and. gbWAC_READ
      if db_select(laFIELDLST,lcTABLE,,{lcWHERE}) == -1
         error_sys(db_error())
      endif
      laRES := db_fetchrow()
      for ii := 1 to len(laFIELDLST)
          wPut(laFIELDLST[ii],laRES[ii])
      next ii
      wPut('TITLE','Alteração do cadastro de Cálculo de cobrança')
   elseif lcACTION = 'SAVE' .and. gbWAC_WRITE
      if len(alltrim(WGet('NM_COBRANCA','C'))) = 0
         walert('Cobrança é um campo obrigatório')
         get2Put()
         return(.f.)
      endif
      aadd(laSAVE,laFIELDLST)
      for ii := 1 to len(laFIELDLST)
         if laFIELDLST[ii] = 'FL_TP_TIMESHEET'
            lcTP_COBRANCA := alltrim(WGet('TP_COBRANCA','C'))
            if lcTP_COBRANCA == 'Mês' .or. lcTP_COBRANCA = 'Processo'
               aadd(laSAVE_AUX,'0')
            elseif lcTP_COBRANCA == 'Ato processual'
               aadd(laSAVE_AUX,'1')
            elseif lcTP_COBRANCA == 'Mês / Hora' .or. lcTP_COBRANCA = 'Hora'
               aadd(laSAVE_AUX,'2')
            elseif lcTP_COBRANCA == 'Avulso'
               aadd(laSAVE_AUX,'3')
            endif
            loop
         endif
         aadd(laSAVE_AUX,WGet(laFIELDLST[ii]))
      next ii
      aadd(laSAVE,laSAVE_AUX)
      if db_replace(laSAVE,lcTABLE,{lcWHERE}) == -1
         error_sys(db_error())
      endif
   elseif lcACTION = 'DELETE' .and. gbWAC_DELETE
      if db_delete(lcTABLE,lcWHERE) == -1
         error_sys(db_error())
      endif
   endif

   /*
   if WGet('FIND.X','B')
      lnNR_ROWINI := 0
      lnNR_ROWFIN := 0
   endif
   if !empty(lcFILTER_VALUE)
      //aadd(laWHERE,laFIELDLST[ascan(laLABELLST, lcFILTER_FIELD)]+' like '+DLAP+'%'+lcFILTER_VALUE+'%'+DLAP)
      aadd(laWHERE,mkwherelst({{laFIELDLST[ascan(laLABELLST, lcFILTER_FIELD)],lcFILTER_VALUE}}))
   endif
   aadd(laORDERBY,laFIELDLST[ascan(laLABELLST, lcORDER_FIELD)])
   if WGet('LSTPREV','B') .or. WGet('LSTPREV.X','B')
      if lnNR_ROWINI-lnNR_ROWPREV > 0
         aadd(laLIMIT,lnNR_ROWINI-lnNR_ROWPREV)
         aadd(laLIMIT,lnNR_ROWPREV)
         lnNR_ROWINI := lnNR_ROWINI-lnNR_ROWPREV
      else
         aadd(laLIMIT,lnNR_ROWPREV)
         lnNR_ROWINI := 0
      endif
   elseif WGet('LSTNEXT','B') .or. WGet('LSTNEXT.X','B')
      aadd(laLIMIT,lnNR_ROWFIN)
      aadd(laLIMIT,lnNR_ROWNEXT)
      lnNR_ROWINI := lnNR_ROWFIN
   else
      aadd(laLIMIT,lnNR_ROWNEXT)
      lnNR_ROWINI := 0
   endif
   */

   //if db_select(laFIELDLST,lcTABLE,,laWHERE,laORDERBY,,,laLIMIT) = -1
   if db_select(laFIELDLST,lcTABLE) = -1
      error_sys(db_error())
   endif
   laRES := db_fetchall()
   wPut('lstCOBRANCA',laRES)

   /*
   lnNR_ROWFIN := lnNR_ROWINI+len(laRES)-1
   wPut('FILTER_FIELD_OPT',laLABELLST)
   wPut('FILTER_FIELD',lcFILTER_FIELD)
   wPut('FILTER_CONTENT',lcFILTER_VALUE)
   wPut('ORDER_FIELD_OPT',laLABELLST)
   wPut('ORDER_FIELD',lcORDER_FIELD)
   wPut('NR_ROWINI',alltrim(str(lnNR_ROWINI)))
   wPut('NR_ROWFIN',alltrim(str(lnNR_ROWFIN)))
   wPut('NR_ROWPREV',alltrim(str(lnNR_ROWPREV)))
   wPut('NR_ROWNEXT',alltrim(str(lnNR_ROWNEXT)))
   */
return

/*

Project      : gr5
Program      : docrtf_mnt_html
Function     : docrtf_mnt_html
Created on   : 2009-10-28 11:24:49
Descripition : Manutenção Modelos de Documentos

*/

   local laRESULT   := {},;
         laMVTSAVE  := {},;
         laRES      := {},;
         laVALIDA   := {},;
         laFOREIGN  := {},;
         laPUT      := {} as array

   local lcWHERE    := '',;
         lcTABLE    := '',;
         lcPROCURA  := '',;
         lcACTION   := ''  as string

   local xx         := 0 ,;
         winicio    := 0 ,;
         wfim       := 0 as numeric

   local lnfile         := '' ,;
         lcMSG          := '' ,;
         lcarquivograva := '' ,;
         lcGENDOCAPP    := '' ,;
         lcRET          := '' ,;
         lcPATHFILE     := '' as string

  local laFIELDS   := {} ,;
        laFLD_DOC  := {} ,;
        laGED      := {} ,;
        laDOC      := {} ,;
        laTPDOC1   := {} ,;
        laTPDOC2   := {} ,;
        laJOIN     := {} ,;
        laWHERE    := {} ,;
        laSAVE     := {} ,;
        laSAVEAUX  := {} ,;
        laSAVE_AUX := {} as array

  local ii         := 0  as int

  local lnHANDLE

  // Private variables --------------------------------------------------------------------------------------------------------------------
  private pcITEM   := '' ,;
          pcVAR    := ''


  // Glauber 27/02/2014 - Implementação da comunicação com webservice

   lcGENDOCAPP  := WSet('GENDOCAPP')

   if (Empty(Alltrim(lcGENDOCAPP)))
      error_sys("CLIENTE DE APLICAÇÃO GENDOC NÃO FOI CONFIGURADO, POR FAVOR VERIFIQUE A TAG '<b>GENDOCAPP</b>' DO ARQUIVO .WPROFILE.")
   endif


   lcTABLE   := 'documento_modelo'

   laFIELDS        := structtable(WSet("DB_ACTIVE"),lcTABLE,1,'A')
   x1 := wget('DOCUMENTO_MODELO','C')
   x1 := strtran(x1,chr(39)," ")
   x1 := strtran(x1,chr(34)," ")
   lcWHERE   := 'TP_PASTA = '+DLAP+WGet('TP_PASTA','C')+DLAP+' and DOCUMENTO_MODELO = '+DLAP+x1+DLAP
   lcACTION  := alltrim(upper(WGet('ACTION')))
   lcPROCURA := ''
   laVALIDA  := {'TP_PASTA','DOCUMENTO_MODELO'}

   carrega_cbox({{'pasta_config','TP_PASTA','Y'}})
   wput('LOGIN_RESP',gcLogin)
   wput('DT_ALTERACAO',DATE())
   init_reqfield(WSet('_USER_INTERFACE'),laVALIDA)

   if lcACTION == 'ALTER'
      if db_select(laFIELDS,lcTABLE,,{lcWHERE}) == -1
         error_sys(db_error())
      endif
      laRESULT := db_fetchall()
      if len(laRESULT) > 1
         db2put(laRESULT)
      endif

   elseif lcACTION == 'DELETE'
      if db_delete(lcTABLE,lcWHERE) = -1
         error_sys(db_error())
      endif

   elseif lcACTION == 'SAVE'

         for x := 1 to len(laFIELDS)
            // função para checar aspas simples e duplas
            // 18/2/2009 16:39:27 - Sonia Perdigão    
            x1 := wget(laFIELDS[x])
            x1 := strtran(x1,chr(39)," ")
            x1 := strtran(x1,chr(34)," ")
            if laFIELDS[x] == 'DT_CADASTRO'
               if EMPTY(WGET(laFIELDS[x]))
                  aadd(laSAVEAUX,date())
               else    
                  aadd(laSAVEAUX,WGet(laFIELDS[x]))   
               endif
            elseif laFIELDS[x] == 'LOGIN_CADASTRO'
               if EMPTY(WGET(laFIELDS[x]))
                  aadd(laSAVEAUX,gcLogin)
               else
                  aadd(laSAVEAUX,WGet(laFIELDS[x]))   
               endif   
            elseif laFIELDS[x] == 'DOCUMENTO_DESCRICAO'
                if len(getfilename(WGETFILE(laFIELDS[X],'F'))) == 0
                   walert('É necessário selecionar o arquivo a ser salvo.')
                   get2put()
                   monta_grade()
                   return(nil)
                else
// tratamento do nome do arquivo - trunca com mais de 45 posicoes
                   lcARQUIVOGRAVA := getfilename(WGETFILE(laFIELDS[X],'F'))              
                   if len(lcARQUIVOGRAVA) > 45
                      lcARQUIVOGRAVA:= substr(lcARQUIVOGRAVA,1,45)+substr(lcARQUIVOGRAVA,at('.',lcARQUIVOGRAVA),5)
                   //else
                   //   lcARQUIVOGRAVA :=  wgetfile(laFIELDS[X],'F')
                   endif
// separa diretorio e grava só o nome com arquivo                    
                   winicio := 1
                   wfim := 1
                   ii := 0
                   for ii := 1 to len(lcARQUIVOGRAVA)
                       lcCHAR := substr(lcarquivograva,ii,1)
                       if lcCHAR == '\'
                          winicio := ii + 1
                       endif
                       if lcCHAR =='.'
                          wfim := ii
                       endif
                   next ii
                endif
                lcArquivoGrava := rtrim(substr(lcARQUIVOGRAVA,winicio,(wfim-winicio)))
               aadd(laSAVEAUX,lcARQUIVOGRAVA)
            else
               aadd(laSAVEAUX,WGet(laFIELDS[x]))
            endif
         next x
//         WOUT('lcArquivoGrava:'+lcArquivoGrava)
         aadd(laSAVE,laFIELDS)
         aadd(laSAVE,laSAVEAUX)
//         WOUT('lnfile:'+lnfile)
         lnfile := lcArquivoGrava
  //       lcnome :=     getfilename(WGetFile('DOCUMENTO_DESCRICAO','F')) // Nome do arquivo
  //                           WGetFile(paVAR_WICDO[2]+pcITEM,'T')             ,; // Tipo
  //                           WGetFile(paVAR_WICDO[2]+pcITEM,'V')             ,; // Conteudo
  //                           WGet(paVAR_WICDO[3]+pcITEM,'C')})                  // Comentário

         // Enviar o arquivo via webservice
         lcRET := EnvDoc(WGetFile('DOCUMENTO_DESCRICAO','F'),wgetfile('DOCUMENTO_DESCRICAO','V')) // Função estática no final deste programa
         if (! Empty(lcRET))
             error_sys("NÃO FOI POSSÍVEL ENVIAR O ARQUIVO, ERRO:"+lcRET)
         else
             if db_replace(laSAVE,lcTABLE,{lcWHERE},) == -1
                error_sys(db_error())
             endif
         endif




   elseif lcACTION == 'SEARCH'
      for xx := 1 to len(laFIELDS)
         if wmd_wfieldtype(laFIELDS[xx]) == 'C'
             if ! empty(WGet(laFIELDS[xx],'C'))
                x1 := wget(laFIELDS[xx])
                x1 := strtran(x1,chr(39)," ")
                x1 := strtran(x1,chr(34)," ")
                if empty(lcPROCURA)
                   lcPROCURA += laFIELDS[xx]+' like '+DLAP+'%'+x1+'%'+DLAP
                else
                   lcPROCURA += ' and '+laFIELDS[xx]+' like '+DLAP+'%'+x1+'%'+DLAP
                endif
             endif
         elseif wmd_wfieldtype(laFIELDS[xx]) == 'N'
             if WGet(laFIELDS[xx],'N') > 0
                if empty(lcPROCURA)
                   lcPROCURA += laFIELDS[xx]+' = '+WGet(laFIELDS[xx],'C')
                else
                   lcPROCURA += ' and '+laFIELDS[xx]+' = '+WGet(laFIELDS[xx],'C')
                endif
             endif
         endif
      next xx

      Monta_Grade(lcPROCURA)
      get2put()
      return
   endif
   Monta_Grade()
return

// Montagem da Grade com os dados cadastrados
Static Function Monta_Grade(pc_filtro)
local laFIELDS := {},;
      laRESULT := {} as array
local lcTABLE  := '',;
      lcWHERE  := '' as string
local ii       := 0 as numeric

   lcTABLE := 'documento_modelo'
   laFIELDS := {'TP_PASTA','DOCUMENTO_MODELO','DOCUMENTO_DESCRICAO'}

   if ! empty(pc_filtro)
      lcWHERE := pc_filtro 
   else
      lcWHERE := ''
   endif
   if empty(pc_filtro)
      if db_select({'distinct documento_modelo.TP_PASTA','documento_modelo.DOCUMENTO_MODELO','documento_modelo.DOCUMENTO_DESCRICAO'},'documento_modelo') == -1
         error_sys(db_error())
      endif
   else
      if db_select({'documento_modelo.TP_PASTA','documento_modelo.DOCUMENTO_MODELO','documento_modelo.DOCUMENTO_DESCRICAO'},'documento_modelo',,{lcWHERE}) == -1
         error_sys(db_error())
      endif
   endif
   laRESULT  := db_fetchall()
   lnCOUNT   := len(laRESULT)-1
   if lnCOUNT > 0
	   laPAGINAS := paginacao(lnCOUNT,'','')
	   laLIMIT   := param_fetch(laPAGINAS,'LIMIT')
	   if empty(pc_filtro)
	      if db_select(laFIELDS,lcTABLE,,,{'TP_PASTA'},,,laLIMIT) == -1
	         error_sys(db_error())
	      endif
	   else
	      if db_select(laFIELDS,lcTABLE,,{lcWHERE},{'TP_PASTA'},,,laLIMIT) == -1
	         error_sys(db_error())
	      endif
	   endif
	   laRESULT := db_fetchall()
      if len(laRESULT) > 1
         //Resumo da pesquisa
         lcCODE := alltrim(str(laLIMIT[1]+1))+'-'
         if ((len(laRESULT)-1) < (laLIMIT[2]-laLIMIT[1]))
            lcCODE += alltrim(str(len(laRESULT)-1))
         elseif param_fetch(laPAGINAS,'GOTO_PAGE') == param_fetch(laPAGINAS,'NR_PAGES') //lnNR_PAGES
            lcCODE += alltrim(str(lnCOUNT))
         else
            lcCODE += alltrim(str(laLIMIT[1]+param_fetch(laPAGINAS,'ROWS_PAGE')))
         endif
         lcCODE += ' de '+alltrim(str(lnCOUNT))
         if lnCOUNT > 1
            lcCODE := ' Resultados '+lcCODE+' registros'
         else
            lcCODE := ' Resultado '+lcCODE+' registro'
         endif
         wput('RESUME_RESULTSET',lcCODE)
         aadd(laRESULT[1],'(row)')
         for ii := 2 to len(laRESULT)
            aadd(laRESULT[ii],'(row)'+wic_action('wicaction/docrtf.mnt.html?'+;
                                                 'TP_PASTA='+laRESULT[ii, db_fetchncol(laRESULT,'TP_PASTA')]+;
                                                 '&DOCUMENTO_MODELO='+laRESULT[ii, db_fetchncol(laRESULT,'DOCUMENTO_MODELO')]+;
                                                 '&DOCUMENTO_DESCRICAO='+laRESULT[ii, db_fetchncol(laRESULT,'DOCUMENTO_DESCRICAO')]+;
                                                 '&ACTION=ALTER'))
         next ii
         wPut('lstTRCT',grid_create(laRESULT))
      else
         wPut('lstTRCT','<center>Nenhum registro foi encontrado</center>')
      endif
   endif
return

Static function paginacao(fnCOUNT,fcMSGTYPE,fcQUICK_SEARCH)
  local ii          := 0 ,;
        lnGOTO_PAGE := WGet('GOTO_PAGE','N') ,;
        lnNR_PAGES  := 0 ,;
        lnROWS_PAGE := 0 ,;
        lnMAX_PAGES := 0 ,;
        lnPAGE_INI  := 0 ,;
        lnPAGE_FIN  := 0 ,;
        lnLIMIT1    := 0 ,;
        lnLIMIT2    := 0 as int

   local lcCODE     := '' as string

   local laPAGES    := {} ,;
         laLIMIT    := {} ,;
         laRETURN   := {} as array

   if lnCOUNT > 0
      if lnGOTO_PAGE <= 0
         lnGOTO_PAGE := 1
      endif
      lnMAX_PAGES := iif(val(WSet('MAX_PAGES'))==0,10,val(WSet('MAX_PAGES')))
      lnROWS_PAGE := iif(val(WSet('ROWS_PAGE'))==0,10,val(WSet('ROWS_PAGE')))

      if lnROWS_PAGE > fnCOUNT
         lnROWS_PAGE := fnCOUNT
      endif
      lnNR_PAGES := fnCOUNT/lnROWS_PAGE

      if (fnCOUNT % lnROWS_PAGE) > 0
         lnNR_PAGES += 1
      endif

      lnMAX_PAGES := iif(lnNR_PAGES < lnMAX_PAGES,lnNR_PAGES,lnMAX_PAGES)
      if lnGOTO_PAGE == 1
         lnPAGE_INI := 1                              // Página inicial
         lnPAGE_FIN := lnMAX_PAGES                    // Página final
      else
         if alltrim(WGet('MORE')) == 'Y'              // Visualizar as próximas 10 páginas, se possível
            lnPAGE_INI := lnGOTO_PAGE
            lnPAGE_FIN := lnMAX_PAGES+(lnGOTO_PAGE-1)
            if lnPAGE_FIN > lnNR_PAGES
               lnPAGE_FIN := lnNR_PAGES
            endif
         elseif alltrim(WGet('LESS')) == 'Y'          // Visualizar as 10 páginas anteriores, se possível
            lnPAGE_INI := lnGOTO_PAGE-lnMAX_PAGES+1
            lnPAGE_FIN := lnGOTO_PAGE
         else
            lnPAGE_INI := WGet('FIRST_PAGE','N')
            lnPAGE_FIN := WGet('LAST_PAGE','N')
         endif
      endif

      aadd(laPAGES,{'PROGRAM_CALL','NR_PAGE'})
      for ii := lnPAGE_INI to lnPAGE_FIN
          lcCODE := wic_action('wicaction/docrtf.mnt.html?GOTO_PAGE='+alltrim(str(ii)))
          lcCODE += '&FIRST_PAGE='+alltrim(str(lnPAGE_INI))+'&LAST_PAGE='+alltrim(str(lnPAGE_FIN))
          if ii == lnPAGE_INI
             lcCODE += '&LESS=Y'
          endif
          if ii == lnPAGE_FIN .and. lnPAGE_FIN < lnNR_PAGES
             lcCODE += '&MORE=Y'
          endif

          // Manter a pesquisa do usuário caso ela exista e demais parametros
          if !empty(fcQUICK_SEARCH)
             lcCODE += '&QUICK_SEARCH='+fcQUICK_SEARCH
          endif

          if !empty(fcMSGTYPE)
             lcCODE += '&MSGTYPE='+fcMSGTYPE
          endif

          aadd(laPAGES,{lcCODE,alltrim(str(ii))})
      next ii
      WPut('ifRESULT',.T.)
      WPut('PAGES',laPAGES)

      lnLIMIT1 := iif(lnGOTO_PAGE == 1,0,((lnGOTO_PAGE*lnROWS_PAGE)-1)-(lnROWS_PAGE-1))
      lnLIMIT2 := lnROWS_PAGE
      laLIMIT  := {lnLIMIT1,lnLIMIT2}

      aadd(laRETURN,{'NR_PAGES',lnNR_PAGES})
      aadd(laRETURN,{'ROWS_PAGE',lnROWS_PAGE})
      aadd(laRETURN,{'GOTO_PAGE',lnGOTO_PAGE})
      aadd(laRETURN,{'LIMIT',laLIMIT})
   else
      aadd(laRETURN,{'NR_PAGES' ,0})
      aadd(laRETURN,{'ROWS_PAGE',0})
      aadd(laRETURN,{'GOTO_PAGE',0})
      aadd(laRETURN,{'LIMIT',{}})
   endif
return(laRETURN)



/*
*
* Autor.....: Sonia Perdigão
* Function..: wingravadocs(fnGED,fnGEDFILE,fnGEDFVERS)
* Objetivo..:
* Parâmetros:
*   fnCGI...: Documento CGI
*   fnFILE..: Id do arquivo a ser armazenado
* Retorno:
*               Retorna o caminho com completo com o nome do arquivo
*/
static function wingravadocs(fcFILE)

   #define lcDIRSEP  '\'
   local lcDIR    := '' ,;
   		   lcDIRW   := '' ,;
         lcFILE   := '' ,;
         lcRETURN := '' as string

   local laDIR    := {} as array

   local llWIN32  := .f. as logical
   lcDIR := alltrim(lower(wset('PATHDOCS')))

   if empty(lcDIR)
      lcDIR := '.\templates'+lcDIRSEP
   endif
   lcFILE := fcFILE+'.xml'


return(lcDIR+lcFILE)









/*
*
* Autor.....: Glauber Duma
* Function..: EnvDoc(pcArquivoGrava,pcConteudo)
* Objetivo..: Enviar o arquivo para o webservice.
* Parâmetros:
*   pcArquivoGrava..: Nome do arquivo a ser gravado.
*   pcConteudo......: Conteúdo do arquivo a ser gravado.
* Retorno:
*               Em caso de erro, retorna a mensagem de erro, em caso de sucesso não retorna nada
*/

Static Function EnvDoc(pcArquivoGrava,pcConteudo)


   local lcXML      := '',;
         lcArqTmp   := Wset('_WTEMP')+WSet('LOGIN')+alltrim(wic_random())+'.XML',;
         lcArqErro  := '.err',;
         lcServico  := '-s:UPLOADTEMPLATE',;
         lcTemplate := '-t:'+pcArquivoGrava,;
         lcSaida    := '-o:'+lcArqTmp,;
         lcERRO     := '',;
         lcCALL     := ''  as String


//          lcTemplate := '-t:'+StrTran(WGet('TP_PASTA','C'),chr(32),'_') +pcArquivoGrava,;

   if Empty(pcArquivoGrava)
      return('EnvDoc: Nome do arquivo não foi informado.')
   endif

   if Empty(pcConteudo)
      return('EnvDoc: Arquivo enviado não contém conteúdo.')
   endif

   GravaArquivo(lcArqTmp,pcConteudo) // Função presente na func_wic

   lcCALL := WSet('GENDOCAPP') + ' ' + lcServico + ' ' + lcTemplate + ' ' + lcSaida

   ! (lcCALL)

//   wout('<br><b>Chamada via Run:' + lcCALL)

   // Verificar se ocorreu algum erro

   lcERRO := GetFileContent(lcArqErro)

   if ! empty(lcERRO)
       lcERRO := substr(lcERRO,at('<ERRO>'), len(lcERRO))
       lcERRO := strtran(lcERRO, '<ERRO>','')
       lcERRO := strtran(lcERRO, '</ERRO>','')
       Ferase(lcArqErro)
       return lcERRO
   endif

return ''











